(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{1287:function(t,e,a){t.exports=a.p+"assets/img/glibc语言字符.8c8d9f7d.jpg"},1288:function(t,e,a){t.exports=a.p+"assets/img/1.bb0a22de.jpg"},1289:function(t,e,a){t.exports=a.p+"assets/img/2.f9abed58.jpg"},1290:function(t,e,a){t.exports=a.p+"assets/img/3.bcc7b5a5.jpg"},1733:function(t,e,a){"use strict";a.r(e);var l=a(42),s=Object(l.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"_1-概述"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[t._v("#")]),t._v(" 1 概述")]),t._v(" "),l("p",[t._v("IBM社区曾有篇名为《glibc与Linux 的国际化与本地化机制》的帖子（链接：https://cutt.ly/KzjZUxW ），详细介绍了glibc的国际化和本地化的相关知识，本文将在此基础上这次将结合openEuler glibc及其子包提供的文件详细说明glibc locale相关的使用方法。"),l("br"),l("br"),t._v("\n软件信息如下：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"30pt"}},[t._v("软件项")])]),t._v(" "),l("th",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"150pt"}},[t._v("版本信息")])])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"30pt"}},[t._v("OS")])]),t._v(" "),l("td",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"150pt"}},[t._v("openEuler 20.03 (LTS)")])])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"30pt"}},[t._v("kernel")])]),t._v(" "),l("td",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"150pt"}},[t._v("4.19.90-2003.4.0.0036.oe1")])])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"30pt"}},[t._v("glibc")])]),t._v(" "),l("td",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"150pt"}},[t._v("2.28")])])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"30pt"}},[t._v("gcc")])]),t._v(" "),l("td",{staticStyle:{"text-align":"center"}},[l("div",{staticStyle:{width:"150pt"}},[t._v("7.3.0")])])])])]),t._v(" "),l("br"),t._v(" "),l("h1",{attrs:{id:"_2-功能介绍"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-功能介绍"}},[t._v("#")]),t._v(" 2 功能介绍")]),t._v(" "),l("p",[t._v("这部分我们从文件粒度、用户使用粒度和rpm包粒度来说明，具体内容见下图：\n"),l("center",[l("img",{staticStyle:{zoom:"40%"},attrs:{src:a(1287)}})]),t._v(" "),l("br")],1),t._v(" "),l("h2",{attrs:{id:"_2-1-文件层面"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-文件层面"}},[t._v("#")]),t._v(" 2.1 文件层面")]),t._v(" "),l("p",[t._v("文件层面，各个模块的功能如下：\n"),l("center",[l("img",{staticStyle:{zoom:"100%"},attrs:{src:a(1288)}})]),t._v(" "),l("br")],1),t._v(" "),l("h2",{attrs:{id:"_2-2-用户层面"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-用户层面"}},[t._v("#")]),t._v(" 2.2 用户层面")]),t._v(" "),l("p",[t._v("用户使用层面，各个模块的功能如下：\n"),l("center",[l("img",{staticStyle:{zoom:"100%"},attrs:{src:a(1289)}})]),t._v(" "),l("br")],1),t._v(" "),l("h2",{attrs:{id:"_2-3-rpm包层面"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-rpm包层面"}},[t._v("#")]),t._v(" 2.3 rpm包层面")]),t._v(" "),l("p",[t._v("rpm包层面，各个模块的功能如下：\n"),l("center",[l("img",{staticStyle:{zoom:"100%"},attrs:{src:a(1290)}})]),t._v(" "),l("br")],1),t._v(" "),l("p",[t._v("图中各个层面都已有大致的介绍，在此不再加文字赘述。\n"),l("br"),l("br")]),t._v(" "),l("h1",{attrs:{id:"_3-常用功能"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-常用功能"}},[t._v("#")]),t._v(" 3 常用功能")]),t._v(" "),l("h2",{attrs:{id:"_3-1-本地化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-本地化"}},[t._v("#")]),t._v(" 3.1 本地化")]),t._v(" "),l("p",[t._v("通俗地讲，locale就是本地交互环境的呈现形式，再通俗的说，就是shell界面显示哪种语言，哪种组织形式，让我们通过具体案例来认识locale。\n"),l("br")]),t._v(" "),l("h3",{attrs:{id:"_3-1-1-locale与子语言包"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-locale与子语言包"}},[t._v("#")]),t._v(" 3.1.1 locale与子语言包")]),t._v(" "),l("p",[t._v("直接敲locale命令：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('$ locale\nLANG=en_US.UTF-8\nLC_CTYPE="en_US.UTF-8"\nLC_NUMERIC="en_US.UTF-8"\nLC_TIME="en_US.UTF-8"\nLC_COLLATE="en_US.UTF-8"\nLC_MONETARY="en_US.UTF-8"\nLC_MESSAGES="en_US.UTF-8"\nLC_PAPER="en_US.UTF-8"\nLC_NAME="en_US.UTF-8"\nLC_ADDRESS="en_US.UTF-8"\nLC_TELEPHONE="en_US.UTF-8"\nLC_MEASUREMENT="en_US.UTF-8"\nLC_IDENTIFICATION="en_US.UTF-8"\nLC_ALL=en_US.UTF-8\n')])])]),l("p",[t._v("可以看出，locale按照将文化传统的各个方面分成12个大类，这12个大类分别是：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("1、语言符号及其分类(LC_CTYPE)\n2、数字(LC_NUMERIC)\n3、比较和排序习惯(LC_COLLATE)\n4、时间显示格式(LC_TIME)\n5、货币单位(LC_MONETARY)\n6、信息主要是提示信息,错误信息,状态信息,标题,标签,按钮和菜单等(LC_MESSAGES)\n7、姓名书写方式(LC_NAME)\n8、地址书写方式(LC_ADDRESS)\n9、电话号码书写方式(LC_TELEPHONE)\n10、度量衡表达方式 (LC_MEASUREMENT)\n11、默认纸张尺寸大小(LC_PAPER)\n12、对locale自身包含信息的概述(LC_IDENTIFICATION)\n")])])]),l("p",[t._v("所以说，locale就是某一个地域内的人们的语言习惯和文化传统和生活习惯。一个地区的locale就是根据这几大类的习惯定义的，这些locale定义文件放在 /usr/share/i18n/locales 目录下面，例如en_US, zh_CN and de_DE@euro都是locale的定义文件。"),l("br")]),t._v(" "),l("p",[t._v("通过修改环境变量即可修改locale，比如：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('# echo $LANG\nen_US.UTF-8\n# LANG="zh_CN.UTF-8"\n\n')])])]),l("p",[t._v("我们修改了LANG这个环境变量，这时候输入date命令：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# date\n2021年 03月 09日 星期二 11:11:02 CST\n")])])]),l("p",[t._v("已经成功将loacle变成中文了，但是如果随便一个--help（例如iconv --help）发现还是英文，这是为什么？")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# iconv --help \nUsage: iconv [OPTION...] [FILE...]\nConvert encoding of given files from one encoding to another.\n\n Input/Output format specification:\n  -f, --from-code=NAME       encoding of original text\n  -t, --to-code=NAME         encoding for output\n\n Information:\n  -l, --list                 list all known coded character sets\n\n Output control:\n  -c                         omit invalid characters from output\n  -o, --output=FILE          output file\n  -s, --silent               suppress warnings\n      --verbose              print progress information\n\n  -?, --help                 Give this help list\n      --usage                Give a short usage message\n  -V, --version              Print program version\n\nMandatory or optional arguments to long options are also mandatory or optional\nfor any corresponding short options.\n\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/libc/bugs.html>.\n")])])]),l("p",[t._v("这就需用到glibc的子语言包了，具体来说，我们需要安装glibc-langpack-zh子语言包，我们可以先把这个包解压开来看看有什么：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v(".\n└── usr\n    ├── lib\n    │    └── locale\n    └── share\n         └── locale\n")])])]),l("p",[t._v("/usr/lib/locale这个位置是不是很熟悉，没错，就是放置locale-archive文件的目录，在2.1小节的图中其实有提到“语言_地域”文件夹所对应的每个子语言包提供的/usr/lib/locale下的文件实际上和全量locale-archive是有交叉的。\n"),l("br")]),t._v(" "),l("p",[t._v("继续分析子语言包，另一个/usr/share/locale目录下实际上是一个mo文件，名字为libc，而glibc作为基础库主要提供的文件就是 libc.so，这下其实很明朗了，我们刚才输入的iconv命令是glibc提供的，而子语言包也提供了一个以libc命名的mo文件，因此只有安装了提供命令本地化的语言包，glibc提供的命令本地化才能生效。对其他命令来说也是这个道理，一般mo文件会由命令所属的rpm包一并提供。比如我们一直使用的date命令，该命令由coreutils包提供，我们通过rpm -ql列出coreutils包提供的文件可以发现其提供了本地化所需的mo文件，因此我们在通过LANG修改当前的环境信息后，就可以使date命令显示我们需要的语言了。")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# rpm -ql coreutils | grep mo\n...\n/usr/share/locale/zh_CN/LC_MESSAGES/coreutils.mo\n/usr/share/locale/zh_CN/LC_TIME/coreutils.mo\n...\n")])])]),l("br"),t._v(" "),l("p",[t._v("安装glibc-langpack-zh包再试一下，已显示中文。")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# iconv --help \n用法： iconv [选项...] [文件...]\n转换给定文件的编码。\n\n 输入/输出格式规范：\n  -f, --from-code=名称     原始文本编码\n  -t, --to-code=名称       输出编码\n\n 信息：\n  -l, --list                 列举所有已知的字符集\n\n 输出控制：\n  -c                         从输出中忽略无效的字符\n  -o, --output=文件        输出文件\n  -s, --silent               关闭警告\n      --verbose              打印进度信息\n\n  -?, --help                 给出此帮助列表\n      --usage                给出简要的用法信息\n  -V, --version              打印程序版本号\n\n长选项的强制或可选参数对对应的短选项也是强制或可选的。\n\n要知道错误报告指令，请参看：\n<http://www.gnu.org/software/libc/bugs.html>。\n")])])]),l("br"),t._v(" "),l("p",[t._v("我们来总结一下，/usr/share/locale目录提供了包括glibc本身在内的各个包本地化相关的mo文件夹，后续mo文件由rpm来提供，配合LANG环境变量即可实现命令的本地化。\n"),l("br"),l("br")]),t._v(" "),l("h3",{attrs:{id:"_3-1-2-locale-archive"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-locale-archive"}},[t._v("#")]),t._v(" 3.1.2 locale-archive")]),t._v(" "),l("p",[t._v("经常有人会问，locale-archive是什么？能不能删？这么大，能不能裁？我在网上找了很久也没找到locale-archive的定义。不妨通俗地给它下个定义：locale-archive是fedora系的glibc提供的一种本地化缓存，未裁剪的全量locale-archive，等效于所有子语言包提供的/usr/lib/locale/目录下文件的集合。\n"),l("br")]),t._v(" "),l("p",[t._v("举个例子就好懂了，假设我们把locale-archive给mv走，然后修改LANG会怎么样？")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('# pwd\n/usr/lib/locale\n# mv locale-archive bak\n# LANG="zh_CN.UTF-8"\n# date \nWed Mar 10 09:21:27 CST 2021\n')])])]),l("p",[t._v("此时，我们试图修改成中文环境，但没有生效。如果安装了glibc-langpack-zh子语言包呢？")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# date\n2021年 03月 10日 星期三 09:22:59 CST\n")])])]),l("p",[t._v("修改生效了，我们卸载掉中文子语言包，把locale-archive给mv回来")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('# pwd\n/usr/lib/locale\n# mv bak locale-archive\n# LANG="zh_CN.UTF-8"\n# date \n2021年 03月 10日 星期三 09:24:17 CST\n')])])]),l("p",[t._v("同样生效了，好了，破案了。其实glibc在spec中已经申明了，当你安装了所需的子语言包，实际上可以卸载掉all-langpacks这个包，即去掉locale-archive这个文件来节省空间。")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("glibc.spec\n\n# The glibc-all-langpacks provides the virtual glibc-langpack,\n# and thus satisfies glibc's requirement for installed locales.\n# Users can add one more other langauge packs and then eventually\n# uninstall all-langpacks to save space.\n%package all-langpacks\nSummary: All language packs for %{name}.\nRequires: %{name} = %{version}-%{release}\nRequires: %{name}-common = %{version}-%{release}\nProvides: %{name}-langpack = %{version}-%{release}\n%description all-langpacks\n")])])]),l("br"),t._v(" "),l("p",[t._v("这里附上locale-archive的裁剪方法："),l("br"),t._v("\nstep1、列出当前环境中的所有locale")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# localedef --list-archive\n")])])]),l("p",[t._v("step2、指定需要裁剪的locale")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# localedef --delete-from-archive [待裁剪locale]\n")])])]),l("p",[t._v("step3、用当前的locale-archive覆盖locale-archive.tmpl")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# mv /usr/lib/locale/locale-archive /usr/lib/locale/locale-archive.tmpl\n")])])]),l("p",[t._v("step4、重新生成locale-archive")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# build-locale-archive\n")])])]),l("br"),t._v(" "),l("p",[t._v("例如：裁剪掉非英文支持")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("# localedef --list-archive | grep -v -i ^en | xargs localedef --delete-from-archive\n# mv /usr/lib/locale/locale-archive /usr/lib/locale/locale-archive.tmpl\n# build-locale-archive\n")])])]),l("p",[t._v("注意：执行build-locale-archive后，可能出现ssh断掉的现象，重新连接即可\n"),l("br"),l("br")]),t._v(" "),l("h2",{attrs:{id:"_3-2-国际化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-国际化"}},[t._v("#")]),t._v(" 3.2 国际化")]),t._v(" "),l("p",[t._v("所谓国际化指的是一个程序或软件可给特定的人群使用而无须修改或重新编译源代码。glibc提供了两个相关的命令（iconv/iconvconfig）和三个接口（iconv_open、iconv和iconv_close），这部分网上有很详细的资料，这里首推《字符编码知识简介和iconv函数的简单使用》这篇帖子（链接：https://cutt.ly/HzcP6nG ），具体作用不再赘述，这里仅稍微补充一点：/usr/lib64/gconv/目录（也可能在/usr/lib/gconv目录）下的文件，其使用逻辑为：iconv接口通过gconv-modules.cache来加载对应so做转码操作，而gconv-modules.cache由iconvconfig命令读取gconv-modules文件来生成。\n"),l("br"),l("br")]),t._v(" "),l("h1",{attrs:{id:"_4-参考资料"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-参考资料"}},[t._v("#")]),t._v(" 4 参考资料")]),t._v(" "),l("p",[t._v("1、浅析 Linux 的国际化与本地化机制：\nhttps://cutt.ly/KzjZUxW")]),t._v(" "),l("p",[t._v("2、字符编码知识简介和iconv函数的简单使用：\nhttps://www.cnblogs.com/qingergege/p/7491590.html")]),t._v(" "),l("p",[t._v("3、locale localedef --之Linux字符集理解：\nhttps://www.cnblogs.com/wn1m/p/10837609.html")]),t._v(" "),l("p",[t._v("4、捣鼓一下linux下的locale：\nhttp://www.360doc.com/content/15/1105/08/14513665_510854234.shtml")]),t._v(" "),l("p",[t._v("5、locale的设定及其LANG、LC_ALL、LANGUAGE环境变量的区别：\nhttps://cutt.ly/DzjXdvr")]),t._v(" "),l("p",[t._v("6、GNU官方关于gconv-modules文件作用以及iconv转码方式的讲解：\nhttps://cutt.ly/5zjXoOr\n"),l("br"),l("br")]),t._v(" "),l("h1",{attrs:{id:"glibc相关文章推荐"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#glibc相关文章推荐"}},[t._v("#")]),t._v(" glibc相关文章推荐")]),t._v(" "),l("p",[t._v("glibc malloc系列文章："),l("br"),t._v("\n    原理简析：https://cutt.ly/NzcDUEd "),l("br"),t._v("\n    数据结构：https://cutt.ly/JzcSBfB "),l("br"),t._v("\n    malloc：https://cutt.ly/TzcSjUX "),l("br"),t._v("\n    free：https://cutt.ly/QzcSy5G "),l("br")]),t._v(" "),l("p",[t._v("glibc问题定位与分析系列文章："),l("br"),t._v("\n    memcpy 1k字节x86_64虚拟机性能下降分析：https://cutt.ly/8zcDyPi "),l("br")])])}),[],!1,null,null,null);e.default=s.exports}}]);