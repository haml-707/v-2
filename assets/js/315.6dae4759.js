(window.webpackJsonp=window.webpackJsonp||[]).push([[315],{1758:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"摘要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#摘要"}},[t._v("#")]),t._v(" 摘要")]),t._v(" "),a("p",[t._v("半虚拟化设备(Virtio Device)在当前云计算虚拟化场景下已经得到了非常广泛的应用，\n并且现在也有越来越多的物理设备也开始支持Virtio协议，即所谓的"),a("code",[t._v("Virtio Offload")]),t._v("，\n通过将virtio协议卸载到硬件上（例如virtio-net网卡卸载，virtio-scsi卸载）让物理机和虚拟机都能够获得加速体验。\n本文中我们来重点了解一下virtio技术中的一些关键点，方便我们加深对半虚拟化的理解。\n本文适合对IO虚拟化有一定了解的人群阅读，本文的目的是对想要了解virtio内部机制的读者提供帮助。")]),t._v(" "),a("p",[t._v("在开始了解virtio之前，我们先思考一下几个相关问题：")]),t._v(" "),a("ul",[a("li",[t._v("virtio设备有哪几种呈现方式?")]),t._v(" "),a("li",[t._v("virtio-pci设备的配置空间都有哪些内容？")]),t._v(" "),a("li",[t._v("virtio前端和后端基于共享内存机制进行通信，它是凭什么可以做到无锁的？")]),t._v(" "),a("li",[t._v("virtio机制中有那几个关键的数据结构？virtio配置接口存放在哪里？virtio是如何工作的？")]),t._v(" "),a("li",[t._v("virtio前后端是如何进行通信的？irqfd和ioeventfd是什么回事儿？在virtio前后端通信中是怎么用到的？")]),t._v(" "),a("li",[t._v("virtio设备支持MSIx，在qemu/kvm中具体是怎么实现对MSIx的模拟呢？")]),t._v(" "),a("li",[t._v("virtio modern相对于virtio legay多了哪些新特性？")])]),t._v(" "),a("h2",{attrs:{id:"_0-简单了解一下virtio-spec协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-简单了解一下virtio-spec协议"}},[t._v("#")]),t._v(" 0. 简单了解一下Virtio Spec协议")]),t._v(" "),a("p",[t._v("virtio协议标准最早由IBM提出，virtio作为一套标准协议现在有专门的技术委员会进行管理，\n具体的标准可以访问"),a("a",{attrs:{href:"http://docs.oasis-open.org/virtio/virtio/v1.0/virtio-v1.0.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("virtio")]),t._v("官网"),a("OutboundLink")],1),t._v("，\n开发者可以向技术委员会提供新的virtio设备提案（"),a("code",[t._v("RFC")]),t._v("），经过委员会通过后可以增加新的virtio设备类型。")]),t._v(" "),a("p",[t._v("组成一个virtio设备的四要素包括：\n"),a("strong",[t._v("设备状态域，"),a("code",[t._v("feature bits")]),t._v("，设备配置空间，一个或者多个"),a("code",[t._v("virtqueue")])]),t._v("。\n其中设备状态域包含6种状态：")]),t._v(" "),a("ul",[a("li",[t._v("ACKNOWLEDGE（1）：GuestOS发现了这个设备，并且认为这是一个有效的virtio设备；")]),t._v(" "),a("li",[t._v("DRIVER (2) : GuestOS知道该如何驱动这个设备；")]),t._v(" "),a("li",[t._v("FAILED (128) : GuestOS无法正常驱动这个设备，Something is wriong；")]),t._v(" "),a("li",[t._v("FEATURES_OK (8) : GuestOS认识所有的feature，并且feature协商一完成；")]),t._v(" "),a("li",[t._v("DRIVER_OK (4) : 驱动加载完成，设备可以投入使用了；")]),t._v(" "),a("li",[t._v("DEVICE_NEEDS_RESET (64) ：设备触发了错误，需要重置才能继续工作。")])]),t._v(" "),a("p",[a("code",[t._v("feature bits")]),t._v("用来标志设备支持那个特性，其中bit0-bit23是特定设备可以使用的"),a("code",[t._v("feature bits")]),t._v("，\nbit24-bit37预给队列和feature协商机制，bit38以上保留给未来其他用途。\n例如：对于virtio-net设备而言，feature bit0表示网卡设备支持checksum校验。\n"),a("code",[t._v("VIRTIO_F_VERSION_1")]),t._v("这个feature bit用来表示设备是否支持virtio 1.0 spec标准。")]),t._v(" "),a("p",[t._v("在virtio协议中，所有的设备都使用virtqueue来进行数据的传输。\n"),a("strong",[t._v("每个设备可以有0个或者多个virtqueue，每个virtqueue占用2个或者更多个4K的物理页")]),t._v("。\nvirtqueue有"),a("code",[t._v("Split Virtqueues")]),t._v("和"),a("code",[t._v("Packed Virtqueues")]),t._v("两种模式，\n在"),a("code",[t._v("Split virtqueues")]),t._v("模式下virtqueue被分成若干个部分，\n每个部分都是前端驱动或者后端单向可写的（不能两端同时写）。\n每个virtqueue都有一个16bit的queue size参数，表示队列的总长度。\n每个virtqueue由3个部分组成：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t+-------------------+--------------------------------+-----------------------+\n\t| Descriptor Table  |   Available Ring  (padding)    |       Used Ring       |\n\t+-------------------+--------------------------------+-----------------------+\n")])])]),a("ul",[a("li",[t._v("Descriptor Table：存放IO传输请求信息；")]),t._v(" "),a("li",[t._v("Available Ring：记录了Descriptor Table表中的哪些项被更新了，前端Driver可写但后端只读；")]),t._v(" "),a("li",[t._v("Used Ring：记录Descriptor Table表中哪些请求已经被提交到硬件，前端Driver只读但后端可写。")])]),t._v(" "),a("p",[t._v("整个virtio协议中设备IO请求的工作机制可以简单地概括为：")]),t._v(" "),a("ol",[a("li",[t._v("前端驱动将IO请求放到"),a("code",[t._v("Descriptor Table")]),t._v("中，然后将索引更新到"),a("code",[t._v("Available Ring")]),t._v("中，然后kick后端去取数据；")]),t._v(" "),a("li",[t._v("后端取出IO请求进行处理，然后结果刷新到"),a("code",[t._v("Descriptor Table")]),t._v("中再更新"),a("code",[t._v("Using Ring")]),t._v("，然后发送中断notify前端。")])]),t._v(" "),a("p",[t._v("从virtio协议可以了解到"),a("strong",[t._v("virtio设备支持3种设备呈现模式")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("Virtio Over PCI BUS，依旧遵循PCI规范，挂在到PCI总线上，作为virtio-pci设备呈现；")]),t._v(" "),a("li",[t._v("Virtio Over MMIO，部分不支持PCI协议的虚拟化平台可以使用这种工作模式，直接挂载到系统总线上；")]),t._v(" "),a("li",[t._v("Virtio Over Channel I/O：主要用在s390平台上，virtio-ccw使用这种基于channel I/O的机制。")])]),t._v(" "),a("p",[t._v("其中，Virtio Over PCI BUS的使用比较广泛，作为PCI设备需按照规范要通过PCI配置空间来向操作系统报告设备支持的特性集合，\n这样操作系统才知道这是一个什么类型的virtio设备，并调用对应的前端驱动和这个设备进行握手，进而将设备驱动起来。\nQEMU会给virtio设备模拟PCI配置空间，对于virtio设备来说PCI Vendor ID固定为0x1AF4，\nPCI Device ID 为 0x1000到0x107F之间的是virtio设备。\n同时，在不支持PCI协议的虚拟化平台上，virtio设备也可以直接通过MMIO进行呈现，\nvirtio-spec 4.2 "),a("a",{attrs:{href:"https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html#x1-1440002",target:"_blank",rel:"noopener noreferrer"}},[t._v("Virtio Over MMIO"),a("OutboundLink")],1),t._v("有针对virtio-mmio设备呈现方式的详细描述，mmio相关信息可以直接通过内核参数报告给Linux操作系统。\n本文主要基于virtio-pci展开讨论。")]),t._v(" "),a("p",[t._v("前面提到virtio设备有"),a("code",[t._v("feature bits")]),t._v("，"),a("code",[t._v("virtqueue")]),t._v("等四要素，那么在virtio-pci模式下是如何呈现的呢？\n从virtio spec来看，老的virtio协议和新的virtio协议在这一块有很大改动。\nvirtio legacy（virtio 0.95）协议规定，对应的配置数据结构（virtio common configuration structure）\n应该存放在设备的BAR0里面，我们称之为"),a("code",[t._v("virtio legay interface")]),t._v("，其结构如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                       virtio legacy ==> Mapped into PCI BAR0 \n\t+------------------------------------------------------------------+ \n\t|                    Host Feature Bits[0:31]                       | \n\t+------------------------------------------------------------------+\n\t|                    Guest Feature Bits[0:31]                      |\n\t+------------------------------------------------------------------+\n\t|                    Virtqueue Address PFN                         |\n\t+---------------------------------+--------------------------------+\n\t|           Queue Select          |           Queue Size           |\n\t+----------------+----------------+--------------------------------+\n\t|   ISR Status   | Device Stat    |           Queue Notify         |\n\t+----------------+----------------+--------------------------------+\n\t|       MSI Config Vector         |         MSI Queue Vector       |\n\t+---------------------------------+--------------------------------+\n")])])]),a("p",[t._v("对于新的"),a("code",[t._v("virtio modern")]),t._v("，协议将配置结构划分为5种类型：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* Common configuration */ \n#define VIRTIO_PCI_CAP_COMMON_CFG        1 \n/* Notifications */ \n#define VIRTIO_PCI_CAP_NOTIFY_CFG        2\n/* ISR Status */ \n#define VIRTIO_PCI_CAP_ISR_CFG           3 \n/* Device specific configuration */ \n#define VIRTIO_PCI_CAP_DEVICE_CFG        4 \n/* PCI configuration access */ \n#define VIRTIO_PCI_CAP_PCI_CFG           5 \n")])])]),a("p",[t._v("以上的每种配置结构是直接映射到virtio设备的BAR空间内，那么如何指定每种配置结构的位置呢？\n答案是通过"),a("code",[t._v("PCI Capability list")]),t._v("方式去指定，这和物理PCI设备是一样的，体现了virtio-pci的协议兼容性。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct virtio_pci_cap { \n        u8 cap_vndr;    /* Generic PCI field: PCI_CAP_ID_VNDR */ \n        u8 cap_next;    /* Generic PCI field: next ptr. */ \n        u8 cap_len;     /* Generic PCI field: capability length */ \n        u8 cfg_type;    /* Identifies the structure. */ \n        u8 bar;         /* Where to find it. */ \n        u8 padding[3];  /* Pad to full dword. */ \n        le32 offset;    /* Offset within bar. */ \n        le32 length;    /* Length of the structure, in bytes. */ \n};\n")])])]),a("p",[t._v("只是略微不同的是，virtio-pci的Capability有一个统一的结构，\n其中"),a("code",[t._v("cfg_type")]),t._v("表示Cap的类型，bar表示这个配置结构被映射到的BAR空间号。\n这样每个配置结构都可以通过BAR空间直接访问，或者通过PCI配置空间的"),a("code",[t._v("VIRTIO_PCI_CAP_PCI_CFG")]),t._v("域进行访问。\n每个Cap的具体结构定义可以参考virtio spec 4.1.4.3小节。")]),t._v(" "),a("h1",{attrs:{id:"_1-前后端数据共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-前后端数据共享"}},[t._v("#")]),t._v(" 1. 前后端数据共享")]),t._v(" "),a("p",[t._v("传统的纯模拟设备在工作的时候，会触发频繁的陷入陷出，\n而且IO请求的内容要进行多次拷贝传递，严重影响了设备的IO性能。\nvirtio为了提升设备的IO性能，采用了共享内存机制，\n"),a("em",[a("strong",[t._v("前端驱动会提前申请好一段物理地址空间用来存放IO请求，然后将这段地址的GPA告诉QEMU")])]),t._v("。\n前端驱动在下发IO请求后，QEMU可以直接从共享内存中取出请求，然后将完成后的结果又直接写到虚拟机对应地址上去。\n"),a("strong",[t._v("整个过程中可以做到直投直取，省去了不必要的数据拷贝开销")]),t._v("。")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("Virtqueue")]),t._v("是整个virtio方案的灵魂所在")]),t._v("。每个virtqueue都包含3张表，\n"),a("code",[t._v("Descriptor Table")]),t._v("存放了IO请求描述符，"),a("code",[t._v("Available Ring")]),t._v("记录了当前哪些描述符是可用的，\n"),a("code",[t._v("Used Ring")]),t._v("记录了哪些描述符已经被后端使用了。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                          +------------------------------------+\n                          |       virtio  guest driver         |\n                          +-----------------+------------------+\n                            /               |              ^\n                           /                |               \\\n                          put            update             get\n                         /                  |                 \\\n                        V                   V                  \\\n                   +----------+      +------------+        +----------+\n                   |          |      |            |        |          |\n                   +----------+      +------------+        +----------+\n                   | available|      | descriptor |        |   used   |\n                   |   ring   |      |   table    |        |   ring   |\n                   +----------+      +------------+        +----------+\n                   |          |      |            |        |          |\n                   +----------+      +------------+        +----------+\n                   |          |      |            |        |          |\n                   +----------+      +------------+        +----------+\n                        \\                   ^                   ^\n                         \\                  |                  /\n                         get             update              put\n                           \\                |                /\n                            V               |               /\n                           +----------------+-------------------+\n                           |\t   virtio host backend          |\n                           +------------------------------------+\n")])])]),a("p",[a("code",[t._v("Desriptor Table")]),t._v("中存放的是一个一个的"),a("code",[t._v("virtq_desc")]),t._v("元素，每个"),a("code",[t._v("virq_desc")]),t._v("元素占用16个字节。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("+-----------------------------------------------------------+\n|                        addr/gpa [0:63]                    |\n+-------------------------+-----------------+---------------+\n|         len [0:31]      |  flags [0:15]   |  next [0:15]  |\n+-------------------------+-----------------+---------------+\n")])])]),a("p",[t._v("其中，addr占用64bit存放了单个IO请求的GPA地址信息，例如addr可能表示某个DMA buffer的起始地址。\nlen占用32bit表示IO请求的长度，flags的取值有3种，\n"),a("code",[t._v("VIRTQ_DESC_F_NEXT")]),t._v("表示这个IO请求和下一个"),a("code",[t._v("virtq_desc")]),t._v("描述的是连续的，\n"),a("code",[t._v("IRTQ_DESC_F_WRITE")]),t._v("表示这段buffer是write only的，\n"),a("code",[t._v("VIRTQ_DESC_F_INDIRECT")]),t._v("表示这段buffer里面放的内容是另外一组buffer的"),a("code",[t._v("virtq_desc")]),t._v("（相当于重定向），\nnext是指向下一个"),a("code",[t._v("virtq_desc")]),t._v("的索引号（前提是"),a("code",[t._v("VIRTQ_DESC_F_NEXT")]),t._v(" & flags）。")]),t._v(" "),a("p",[a("code",[t._v("Available Ring")]),t._v("是前端驱动用来告知后端那些IO buffer是的请求需要处理，每个Ring中包含一个"),a("code",[t._v("virtq_avail")]),t._v("占用8个字节。\n其中，flags取值为"),a("code",[t._v("VIRTQ_AVAIL_F_NO_INTERRUPT")]),t._v("时表示前端驱动告诉后端：\n“当你消耗完一个IO buffer的时候，不要立刻给我发中断”（防止中断过多影响效率）。\nidx表示下次前端驱动要放置"),a("code",[t._v("Descriptor Entry")]),t._v("的地方。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("+--------------+-------------+--------------+---------------------+\n| flags [0:15] |  idx [0:15] |  ring[0:15]  |  used_event [0:15]  |\n+--------------+-------------+--------------+---------------------+\n")])])]),a("p",[t._v("Used Ring结构稍微不一样，flags的值如果为"),a("code",[t._v("VIRTIO_F_EVENT_IDX")]),t._v("并且前后端协商"),a("code",[t._v("VIRTIO_F_EVENT_IDX")]),t._v(" feature成功,\n那么Guest会将used ring index放在available ring的末尾，告诉后端说：\n“Hi 小老弟，当你处理完这个请求的时候，给我发个中断通知我一下”，\n同时host也会将avail_event index放到used ring的末尾，告诉guest说：\n“Hi 老兄，记得把这个idx的请求kick给我哈”。\n"),a("code",[t._v("VIRTIO_F_EVENT_IDX")]),t._v("对virtio通知/中断有一定的优化，在某些场景下能够提升IO性能。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The Guest publishes the used index for which it expects an interrupt\n * at the end of the avail ring. Host should ignore the avail->flags field. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The Host publishes the avail index for which it expects a kick\n * at the end of the used ring. Guest should ignore the used->flags field. */")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtq_used")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("VIRTQ_USED_F_NO_NOTIFY")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" ")])]),t._v("\n        le16 flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        le16 idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtq_used_elem")]),t._v(" ring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Queue Size */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        le16 avail_event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Only if VIRTIO_F_EVENT_IDX */")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* le32 is used here for ids for padding reasons. */")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtq_used_elem")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Index of start of used descriptor chain. */")]),t._v(" \n        le32 id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Total length of the descriptor chain which was used (written to) */")]),t._v(" \n        le32 len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("原理就到这里，后面会以virtio网卡为例进行详细流程说明。")]),t._v(" "),a("h2",{attrs:{id:"_2-前后端通信机制-irqfd-与-ioeventfd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-前后端通信机制-irqfd-与-ioeventfd"}},[t._v("#")]),t._v(" 2. 前后端通信机制（irqfd 与 ioeventfd）")]),t._v(" "),a("p",[t._v("共享内存方式解决了传统设备IO过程中内存拷贝带来的性能损耗问题，除此之外前端驱动和后端驱动的通信问题也是有可以改进的地方。\nVirtio前后端通信概括起来只有两个方向，即GuestOS通知QEMU和QEMU通知GuestOS。\n当前端驱动准备好IO buffer之后，需要通知后端（QEMU），告诉后端：\n“小老弟，我有一波IO请求已经准备好了，你帮我处理一下”。\n前端通知出去后，就可以等待IO结果了（操作系统可以进行一次调度），这时候vCPU可以去干点其他的事情。\n后端收到消息后开始处理IO请求，当IO请求处理完成之后，后端就通过中断机制通知GuestOS：\n“老哥，你的IO给你处理好了，你来取一下”。\n前后端通信机制如下图所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("             +-------------+                +-------------+\n             |             |                |             |\n             |             |                |             |\n             |   GuestOS   |                |     QEMU    |\n             |             |                |             |\n             |             |                |             |\n             +---+---------+                +----+--------+\n                 |     ^                         |    ^\n                 |     |                         |    |\n             +---|-----|-------------------------|----|---+\n             |   |     |                irqfd    |    |   |\n             |   |     +-------------------------+    |   |\n             |   |  ioeventfd                         |   |\n             |   +------------------------------------+   |\n             |                   KVM                      |\n             +--------------------------------------------+\n\n")])])]),a("p",[t._v("前端驱动通知后端比较简单，QEMU设置一段特定的MMIO地址空间，前端驱动访问这段MMIO触发VMExit，\n退出到KVM后利用"),a("code",[t._v("ioeventfd")]),t._v("机制通知到用户态的QEMU，QEMU主循环（main_loop poll）\n检测到ioeventfd事件后调用callback进行处理。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("前端驱动通知后端：\n内核流程mark一下，PCI设备驱动流程这个后面可以学习一下，先扫描PCI bus发现是virtio设备再扫描virtio"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bus。\nworker_thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" process_one_work "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pciehp_power_thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pciehp_enable_slot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \npciehp_configure_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pci_bus_add_devices "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pci_bus_add_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" device_attach "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n__device_attach "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bus_for_each_drv "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" __device_attach_driver "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" driver_probe_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \npci_device_probe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" local_pci_probe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_pci_probe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" register_virtio_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \ndevice_register "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" device_add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bus_probe_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" device_initial_probe \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" __device_attach "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bus_for_each_drv "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" __device_attach_driver "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\ndriver_probe_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_dev_probe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtnet_probe")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("网卡设备驱动加载的入口"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtnet_probe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_device_ready")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * virtio_device_ready - enable vq use in probe function\n * @vdev: the device\n *\n * Driver must call this to use vqs in the probe function.\n *\n * Note: vqs are enabled automatically after probe returns.\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_device_ready")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BUG_ON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" VIRTIO_CONFIG_S_DRIVER_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" VIRTIO_CONFIG_S_DRIVER_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("QEMU"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("KVM后端的处理流程如下：")])]),t._v("\n# 前端驱动写Status位，val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" VIRTIO_CONFIG_S_DRIVER_OK，这时候前端驱动已经ready\nvirtio_pci_config_write  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_ioport_write "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_pci_start_ioeventfd\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_bus_set_host_notifier "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_bus_start_ioeventfd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_device_start_ioeventfd_impl\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_bus_set_host_notifier\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_pci_ioeventfd_assign\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" memory_region_add_eventfd\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" memory_region_transaction_commit\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" address_space_update_ioeventfds\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" address_space_add_del_ioeventfds\n                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_io_ioeventfd_add"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("vhost_eventfd_add\n                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_set_ioeventfd_pio\n                      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kvm_vm_ioctl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("kvm_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" KVM_IOEVENTFD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("kick"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("其实，这就是QEMU的"),a("code",[t._v("Fast MMIO")]),t._v("实现机制。\n我们可以看到，QEMU会为每个设备MMIO对应的MemoryRegion注册一个ioeventfd。\n最后调用了一个KVM_IOEVENTFD ioctl到KVM内核里面，而在KVM内核中会将MMIO对应的（gpa,len,eventfd）信息会注册到KVM_FAST_MMIO_BUS上。\n这样当Guest访问MMIO地址范围退出后（触发"),a("code",[t._v("EPT Misconfig")]),t._v("），KVM会查询一下访问的GPA是否落在某段MMIO地址空间range内部，\n如果是的话就直接写eventfd告知QEMU，QEMU就会从coalesced mmio ring page中取MMIO请求\n（注：pio page和 mmio page是QEMU和KVM内核之间的共享内存页，已经提前mmap好了）。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("kvm")]),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("内核代码virt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kvm"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("eventfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c中")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kvm_vm_ioctl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("KVM_IOEVENTFD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_ioeventfd\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_assign_ioeventfd\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_assign_ioeventfd_idx\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("MMIO处理流程中（handle_ept_misconfig）最后会调用到ioeventfd_write通知QEMU。")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* MMIO/PIO writes trigger an event if the addr/val match */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ioeventfd_write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("kvm_vcpu")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vcpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("kvm_io_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("gpa_t")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_ioeventfd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_ioeventfd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("this"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ioeventfd_in_range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("EOPNOTSUPP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eventfd_signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("eventfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("不了解"),a("code",[t._v("MMIO")]),t._v("是如何模拟的童鞋，可以结合本站的文章"),a("a",{attrs:{href:"https://kernelgo.org/mmio.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("MMIO")]),t._v("模拟实现分析"),a("OutboundLink")],1),t._v("去了解一下，\n如果还是不懂的可以在文章下面评论。")]),t._v(" "),a("p",[a("strong",[t._v("后端通知前端，是通过中断的方式")]),t._v("，QEMU/KVM中有一套完整的中断模拟实现框架，")]),t._v(" "),a("p",[t._v("如果对QEMU/KVM中断模拟不熟悉的童鞋，\n建议阅读一下这篇文章："),a("a",{attrs:{href:"https://www.binss.me/blog/qemu-note-of-interrupt/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("QEMU学习笔记-中断")]),a("OutboundLink")],1),t._v("。\n对于virtio-pci设备，可以通过Cap呈现MSIx给虚拟机，这样在前端驱动加载的时候就会尝试去使能MSIx中断，\n后端在这个时候建立起MSIx通道。")]),t._v(" "),a("p",[t._v("前端驱动加载(probe)的过程中，会去初始化"),a("code",[t._v("virtqueue")]),t._v("，这个时候会去申请MSIx中断并注册中断处理函数：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("virtnet_probe\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" init_vqs\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtnet_find_vqs\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("find_vqs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vp_modern_find_vqs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vp_find_vqs\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vp_find_vqs_msix "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为每virtqueue申请一个MSIx中断，通常收发各一个队列")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vp_request_msix_vectors "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主要的MSIx中断申请逻辑都在这个函数里面")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pci_alloc_irq_vectors_affinity "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申请MSIx中断描述符(__pci_enable_msix_range)")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" request_irq  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册中断处理函数")]),t._v("\n               \n\t       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// virtio-net网卡至少申请了3个MSIx中断：")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个是configuration change中断（配置空间发生变化后，QEMU通知前端）")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送队列1个MSIx中断，接收队列1MSIx中断")]),t._v("\n")])])]),a("p",[t._v("在QEMU/KVM这一侧，开始模拟MSIx中断，具体流程大致如下：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("virtio_pci_config_write\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_ioport_write\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_set_status\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_net_vhost_status\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vhost_net_start\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_pci_set_guest_notifiers\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_virtio_pci_vector_use \n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_irqchip_add_msi_route "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//更新中断路由表")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_virtio_pci_irqfd_use  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使能MSI中断")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_irqchip_add_irqfd_notifier_gsi\n                   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_irqchip_assign_irqfd\n                  \n# 申请MSIx中断的时候，会为MSIx分配一个gsi，并为这个gsi绑定一个irqfd，然后调用ioctl KVM_IRQFD注册到内核中。               \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kvm_irqchip_assign_irqfd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("KVMState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" virq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                    bool assign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("kvm_irqfd")]),t._v(" irqfd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gsi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" virq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" assign "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" KVM_IRQFD_FLAG_DEASSIGN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rfd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        irqfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" KVM_IRQFD_FLAG_RESAMPLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        irqfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("resamplefd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kvm_irqfds_enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ENOSYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kvm_vm_ioctl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" KVM_IRQFD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("irqfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("KVM内核代码virt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kvm"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("eventfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kvm_vm_ioctl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" KVM_IRQFD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("irqfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" kvm_irqfd_assign\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vfs_poll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("irqfd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在内核中poll这个irqfd")]),t._v("\n\n")])])]),a("p",[t._v("从上面的流程可以看出，"),a("strong",[t._v("QEMU/KVM使用"),a("code",[t._v("irqfd")]),t._v("机制来模拟MSIx中断")]),t._v("，\n即设备申请MSIx中断的时候会为MSIx分配一个gsi（这个时候会刷新irq routing table），\n并为这个gsi绑定一个"),a("code",[t._v("irqfd")]),t._v("，最后在内核中去"),a("code",[t._v("poll")]),t._v("这个"),a("code",[t._v("irqfd")]),t._v("。\n当QEMU处理完IO之后，就写MSIx对应的irqfd，给前端注入一个MSIx中断，告知前端我已经处理好IO了你可以来取结果了。")]),t._v(" "),a("p",[t._v("例如，virtio-scsi从前端取出IO请求后会取做DMA操作（DMA是异步的，QEMU协程中负责处理）。\n当DMA完成后QEMU需要告知前端IO请求已完成（Complete），那么怎么去投递这个MSIx中断呢？\n答案是调用"),a("code",[t._v("virtio_notify_irqfd")]),t._v("注入一个MSIx中断。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00005604798d569b")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_notify_irqfd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047d12d670")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x7fab10006110")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at  hw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("virtio"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("virtio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1684")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00005604798adea4")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_scsi_complete_req")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047d09fa70")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at  hw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("virtio"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("76")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00005604798aecfb")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_scsi_complete_cmd_req")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047d09fa70")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at  hw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("virtio"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("468")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00005604798aee9d")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_scsi_command_complete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047ccb0be0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at  hw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("virtio"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("495")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000560479b397cf")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scsi_req_complete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047ccb0be0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at hw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1404")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000560479b2b503")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scsi_dma_complete_noio")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047ccb0be0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at hw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("disk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("279")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000560479b2b610")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scsi_dma_complete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opaque"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047ccb0be0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at hw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scsi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("disk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00005604799b89e3")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dma_complete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dbs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047c6e9ab0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at dma"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("helpers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("118")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00005604799b8a90")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dma_blk_cb")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opaque"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047c6e9ab0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ret"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at dma"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("helpers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("136")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000560479cf5220")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("blk_aio_complete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acb"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047cd77d40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("backend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1327")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000560479cf5470")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("blk_aio_read_entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opaque"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x56047cd77d40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("backend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1387")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000560479df49c4")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("coroutine_trampoline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i0"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2095821104")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22020")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at util"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("coroutine"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ucontext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("115")]),t._v("\n#"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00007fab214d82c0")]),t._v(" in "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__start_context")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("lib64"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("libc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("so"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n")])])]),a("p",[t._v("在"),a("code",[t._v("virtio_notify_irqfd")]),t._v("函数中，会去写"),a("code",[t._v("irqfd")]),t._v("，给内核发送一个信号。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_notify_irqfd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VirtIODevice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VirtQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n     * virtio spec 1.0 says ISR bit 0 should be ignored with MSI, but\n     * windows drivers included in virtio-win 1.8.0 (circa 2015) are\n     * incorrectly polling this bit during crashdump and hibernation\n     * in MSI mode, causing a hang if this bit is never updated.\n     * Recent releases of Windows do not really shut down, but rather\n     * log out and hibernate to make the next startup faster.  Hence,\n     * this manifested as a more serious hang during shutdown with\n     *\n     * Next driver release from 2016 fixed this problem, so working around it\n     * is not a must, but it's easy to do so let's do it here.\n     *\n     * Note: it's safe to update ISR from any thread as it was switched\n     * to an atomic operation.\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_set_isr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("event_notifier_set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("guest_notifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//写vq->guest_notifier，即irqfd")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("QEMU写了这个"),a("code",[t._v("irqfd")]),t._v("后，KVM内核模块中的irqfd poll就收到一个"),a("code",[t._v("POLL_IN")]),t._v("事件，然后将MSIx中断自动投递给对应的LAPIC。\n大致流程是："),a("code",[t._v("POLL_IN")]),t._v(" -> "),a("code",[t._v("kvm_arch_set_irq_inatomic")]),t._v(" -> "),a("code",[t._v("kvm_set_msi_irq")]),t._v(", "),a("code",[t._v("kvm_irq_delivery_to_apic_fast")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("irqfd_wakeup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("wait_queue_entry_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("wait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" EPOLLIN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                idx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("srcu_read_lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("kvm"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("irq_srcu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        seq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_seqcount_begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("irqfd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("irq_entry_sc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" irqfd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("irq_entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_seqcount_retry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("irqfd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("irq_entry_sc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" seq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* An event has been signaled, inject an interrupt */")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kvm_arch_set_irq_inatomic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("irq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" kvm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                             KVM_USERSPACE_IRQ_SOURCE_ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                             false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("EWOULDBLOCK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("schedule_work")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("irqfd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("inject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("srcu_read_unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("kvm"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("irq_srcu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("这里还有一点没有想明白，结合代码和调试来看，virtio-blk/virtio-scsi的msi中断走irqfd机制，\n但是virtio-net（不开启vhost的情况下）不走irqfd，而是直接调用"),a("code",[t._v("virtio_notify")]),t._v("/"),a("code",[t._v("virtio_pci_notify")]),t._v("，\n最后通过KVM的ioctl投递中断？\n从代码路径上来看，后者明显路径更长，谁知道原因告诉我一下!!!。\nhttps://patchwork.kernel.org/patch/9531577/")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Once in virtio_notify_irqfd, once in virtio_queue_guest_notifier_read.\n\nUnfortunately, for virtio-blk + MSI + KVM + old Windows drivers we need the one in virtio_notify_irqfd.\nFor virtio-net + vhost + INTx we need the one in virtio_queue_guest_notifier_read. \n这显然路径更长啊。 \n")])])]),a("p",[t._v("Ok，到这里virtio前后端通信机制已经明了，最后一个小节我们以virtio-net为例，梳理一下virtio中的部分核心代码流程。")]),t._v(" "),a("h2",{attrs:{id:"_3-virtio核心代码分析-以virtio-net为例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-virtio核心代码分析-以virtio-net为例"}},[t._v("#")]),t._v(" 3. virtio核心代码分析，以virtio-net为例")]),t._v(" "),a("p",[t._v("这里我们已virtio-net网卡为例，在没有使用vhost的情况下（网卡后端收发包都走QEMU处理），\n后端收发包走vhost的情况下有些不同，后面单独分析。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-前后端握手流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-前后端握手流程"}},[t._v("#")]),t._v(" 3.1 前后端握手流程")]),t._v(" "),a("p",[t._v("QEM模拟PCI设备对GuestOS进行呈现，设备驱动加载的时候尝试去初始化设备。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("# 先在PCI总线上调用probe设备，调用了virtio_pci_probe，然后再virtio"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bus上调用virtio_dev_probe\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("virtio")]),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("_dev_probe最后调用到virtnet_probe")])]),t._v("\npci_device_probe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" local_pci_probe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtio_pci_probe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" register_virtio_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \ndevice_register "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" device_add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bus_probe_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" device_initial_probe \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" __device_attach "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bus_for_each_drv "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" __device_attach_driver "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" driver_probe_device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \nvirtio_dev_probe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtnet_probe\n\n# 在virtio_pci_probe里先尝试以virtio modern方式读取设备配置数据结构，如果失败则尝试virio legacy方式。\n# 对于virtio legacy，我们前面提到了virtio legacy协议规定设备的配置数据结构放在PCI BAR0里面。\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* the PCI probing function */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_pci_legacy_probe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_pci_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vp_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        rc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pci_request_region")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"virtio-pci-legacy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将设备的BAR0映射到物理地址空间")]),t._v("\n        vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ioaddr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pci_iomap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获得BAR0的内核地址")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n#对于virtio modern，通过capability方式报告配置数据结构的位置，配置数据结构有"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("种类型。\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_pci_modern_probe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_pci_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vp_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* check for a common config: if not, use legacy mode (bar 0). */")]),t._v("\n        common "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_pci_find_capability")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VIRTIO_PCI_CAP_COMMON_CFG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                            IORESOURCE_IO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" IORESOURCE_MEM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("modern_bars"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* If common is there, these should be too... */")]),t._v("\n        isr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_pci_find_capability")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VIRTIO_PCI_CAP_ISR_CFG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                         IORESOURCE_IO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" IORESOURCE_MEM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("modern_bars"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        notify "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_pci_find_capability")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VIRTIO_PCI_CAP_NOTIFY_CFG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                            IORESOURCE_IO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" IORESOURCE_MEM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("modern_bars"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                                            \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Device capability is only mandatory for devices that have\n        * device-specific configuration.\n        */")]),t._v("\n        device "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_pci_find_capability")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VIRTIO_PCI_CAP_DEVICE_CFG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                            IORESOURCE_IO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" IORESOURCE_MEM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("modern_bars"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pci_request_selected_regions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("modern_bars"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"virtio-pci-modern"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_pci_common_cfg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_pci_common_cfg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将配virtio置结构所在的BAR空间MAP到内核地址空间里                                ")]),t._v("\n        vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("common "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map_capability")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" common"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_pci_common_cfg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_pci_common_cfg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("                              \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n# 接着来到virtio_dev_probe里面看下：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_dev_probe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* We have a driver! */")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_add_status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" VIRTIO_CONFIG_S_DRIVER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新status bit，这里要写配置数据结构")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Figure out what features the device supports. */")]),t._v("\n        device_features "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_features")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询后端支持哪些feature bits")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// feature set协商，取交集")]),t._v("\n        err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_finalize_features")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用特定virtio设备的驱动程序probe，例如: virtnet_probe, virtblk_probe")]),t._v("\n        err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" drv"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("probe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("再看下"),a("code",[t._v("virtnet_probe")]),t._v("里面的一些关键的流程，这里包含了virtio-net网卡前端初始化的主要逻辑。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtnet_probe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// check后端是否支持多队列，并按情况创建队列")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Allocate ourselves a network device with room for our info */")]),t._v("\n        dev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc_etherdev_mq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtnet_info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_queue_pairs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义一个网络设备并配置一些属性，例如MAC地址")]),t._v("\n        dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ethtool_ops "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("virtnet_ethtool_ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SET_NETDEV_DEV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化virtqueue")]),t._v("\n        err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_vqs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册一个网络设备")]),t._v("\n        err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("register_netdev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写状态位DRIVER_OK，告诉后端，前端已经ready")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("virtio_device_ready")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将网卡up起来")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("netif_carrier_on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其中关键的流程是"),a("code",[t._v("init_vqs")]),t._v("，在"),a("code",[t._v("vp_find_vqs_msix")]),t._v('流程中会尝试去申请MSIx中断，这里前面已经有分析过了。\n其中，"configuration changed" 中断服务程序'),a("code",[t._v("vp_config_changed")]),t._v("，\nvirtqueue队列的中断服务程序是 "),a("code",[t._v("vp_vring_interrupt")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("init_vqs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" virtnet_find_vqs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("find_vqs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vp_modern_find_vqs\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vp_find_vqs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vp_find_vqs_msix\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vp_find_vqs_msix")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtio_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" nvqs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("virtqueue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vqs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("vq_callback_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("callbacks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bool per_vq_vectors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("irq_affinity")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("desc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 为configuration change申请MSIx中断 */")]),t._v("\n\terr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vp_request_msix_vectors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nvectors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" per_vq_vectors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t      per_vq_vectors "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" desc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nvqs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建队列 --\x3e vring_create_virtqueue --\x3e vring_create_virtqueue_split --\x3e vring_alloc_queue")]),t._v("\n\t         vqs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vp_setup_vq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" queue_idx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callbacks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                ctx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                msix_vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个队列申请一个MSIx中断")]),t._v("\n                err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("request_irq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pci_irq_vector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pci_dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msix_vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  vring_interrupt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  vp_dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("msix_names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("msix_vec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  vqs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("vp_setup_vq")]),t._v("流程再往下走就开始分配共享内存页，至此建立起共享内存通信通道。\n值得注意的是一路传下来的callbacks参数其实传入了发送队列和接收队列的回调处理函数，\n好家伙，从"),a("code",[t._v("virtnet_find_vqs")]),t._v("一路传递到了"),a("code",[t._v("__vring_new_virtqueue")]),t._v("中最终赋值给了"),a("code",[t._v("vq->vq.callback")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("static struct virtqueue *vring_create_virtqueue_split(\n        unsigned int index,\n        unsigned int num,\n        unsigned int vring_align,\n        struct virtio_device *vdev,\n        bool weak_barriers,\n        bool may_reduce_num,\n        bool context,\n        bool (*notify)(struct virtqueue *),\n        void (*callback)(struct virtqueue *),\n        const char *name)\n{\n       /* TODO: allocate each queue chunk individually */\n        for (; num && vring_size(num, vring_align) > PAGE_SIZE; num /= 2) {\n\t\t// 申请物理页，地址赋值给queue\n                queue = vring_alloc_queue(vdev, vring_size(num, vring_align),\n                                          &dma_addr,\n                                          GFP_KERNEL|__GFP_NOWARN|__GFP_ZERO);\n        }\n\n\n        queue_size_in_bytes = vring_size(num, vring_align);\n        vring_init(&vring, num, queue, vring_align); // 确定 descriptor table, available ring, used ring的位置。\n}\n")])])]),a("p",[t._v("我们看下如果"),a("code",[t._v("virtqueue")]),t._v("队列如果收到MSIx中断消息后，会调用哪个"),a("code",[t._v("hook")]),t._v("来处理？")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("irqreturn_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vring_interrupt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" irq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("vring_virtqueue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_vvq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("more_used")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pr_debug")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"virtqueue interrupt with no work for %p\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" IRQ_NONE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlikely")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("broken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" IRQ_HANDLED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pr_debug")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"virtqueue callback for %p (%p)\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("vq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" IRQ_HANDLED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EXPORT_SYMBOL_GPL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vring_interrupt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("不难想到中断服务程序里面会调用队列上的callback。\n我们再回过头来看下"),a("code",[t._v("virtnet_find_vqs")]),t._v("，原来接受队列的回调函数是"),a("code",[t._v("skb_recv_done")]),t._v("，发送队列的回调函数是"),a("code",[t._v("skb_xmit_done")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("static int virtnet_find_vqs(struct virtnet_info *vi)\n{\n       /* Allocate/initialize parameters for send/receive virtqueues */\n        for (i = 0; i < vi->max_queue_pairs; i++) {\n\t\tcallbacks[rxq2vq(i)] = skb_recv_done;\n\t\tcallbacks[txq2vq(i)] = skb_xmit_done;\n\t}\n}\n")])])]),a("p",[t._v("OK，这个小节就到这里。Are you clear ?")]),t._v(" "),a("h3",{attrs:{id:"_3-2-virtio-net网卡收发在virtqueue上的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-virtio-net网卡收发在virtqueue上的实现"}},[t._v("#")]),t._v(" 3.2 virtio-net网卡收发在virtqueue上的实现")]),t._v(" "),a("p",[t._v("这里以virtio-net为例（非vhost-net模式）来分析一下网卡收发报文在virtio协议上的具体实现。\nvirtio-net模式下网卡收发包的流程为：")]),t._v(" "),a("ul",[a("li",[t._v("收包：Hardware => Host Kernel => Qemu => Guest")]),t._v(" "),a("li",[t._v("发包：Guest => Host Kernel => Qemu => Host Kernel => Hardware")])]),t._v(" "),a("h4",{attrs:{id:"_3-2-1-virtio-net网卡发包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-virtio-net网卡发包"}},[t._v("#")]),t._v(" 3.2.1 virtio-net网卡发包")]),t._v(" "),a("p",[t._v("前面我们看到virtio-net设备初始化的时候会创建一个"),a("code",[t._v("net_device")]),t._v("设备：\n"),a("code",[t._v("virtnet_probe")]),t._v(" -> "),a("code",[t._v("alloc_etherdev_mq")]),t._v("注册了"),a("code",[t._v("netdev_ops")]),t._v(" = "),a("code",[t._v("&virtnet_netdev")]),t._v("，\n这里"),a("code",[t._v("virtnet_netdev")]),t._v("是网卡驱动的回调函数集合（收发包和参数设置）。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("net_device_ops")]),t._v(" netdev_ops "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_open               "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rio_open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_start_xmit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" start_xmit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_stop               "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rio_close"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_get_stats          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_stats"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_validate_addr      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" eth_validate_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_set_mac_address    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" eth_mac_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_set_rx_mode        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" set_multicast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_do_ioctl           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rio_ioctl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ndo_tx_timeout         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rio_tx_timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("网卡发包的时候调用"),a("code",[t._v("ndo_start_xmit")]),t._v("，将TCP/IP上层协议栈扔下来的数据发送出去。\n对应到virtio网卡的回调函数就是"),a("code",[t._v("start_xmit")]),t._v("，从代码看就是将skb发送到virtqueue中，\n然后调用virtqueue_kick通知qemu后端将数据包发送出去。")]),t._v(" "),a("p",[t._v("Guest内核里面的virtio-net驱动发包：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("内核驱动 virtio_net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\nstart_xmit\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将skb放到virtqueue队列中")]),t._v("\n \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" xmit_skb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" sg_init_table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("virtqueue_add_outbuf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" virtqueue_add\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// kick通知qemu后端去取")]),t._v("\n\tvirtqueue_kick_prepare "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" virtqueue_notify \n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// kick次数加1")]),t._v("\n\tsq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("stats"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("kicks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n")])])]),a("p",[t._v("Guest Kick后端从KVM中VMExit出来退出到Qemu用户态（走的是ioeventfd）由Qemu去将数据发送出去。\n大致调用的流程是：\n"),a("code",[t._v("virtio_queue_host_notifier_read")]),t._v(" -> "),a("code",[t._v("virtio_net_handle_tx_bh")]),t._v(" -> "),a("code",[t._v("virtio_net_flush_tx")]),t._v("\n-> "),a("code",[t._v("virtqueue_pop")]),t._v("拿到发包(skb) -> "),a("code",[t._v("qemu_sendv_packet_async")])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("Qemu代码virtio"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("net相关代码"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\nvirtio_queue_host_notifier_read "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" virtio_queue_notify_vq\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" vq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("handle_output "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" virtio_net_handle_tx_bh 队列注册的时候，回注册回调函数\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" qemu_bh_schedule "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" virtio_net_tx_bh\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" virtio_net_flush_tx\n\t        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" virtqueue_pop\n\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" qemu_sendv_packet_async "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报文放到发送队列上，写tap设备的fd去发包")]),t._v("\n\t\t    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" tap_receive_iov "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" tap_write_packet\n\t\t    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后调用 tap_write_packet 把数据包发给tap设备投递出去")]),t._v("\n")])])]),a("h4",{attrs:{id:"_3-2-2-virtio-net网卡收包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-virtio-net网卡收包"}},[t._v("#")]),t._v(" 3.2.2 virtio-net网卡收包")]),t._v(" "),a("p",[t._v("网卡收包的时候，tap设备先收到报文，对应的virtio-net网卡tap设备fd变为可读，\nQemu主循环收到POLL_IN事件调用回调函数收包。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("tap_send "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" qemu_send_packet_async "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" qemu_send_packet_async_with_flags\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" qemu_net_queue_send\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" qemu_net_queue_deliver\n\t    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" qemu_deliver_packet_iov\n\t        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" nc_sendv_compat\n\t\t    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" virtio_net_receive\n\t\t        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" virtio_net_receive_rcu\n")])])]),a("p",[t._v("virtio-net网卡收报最终调用了"),a("code",[t._v("virtio_net_receive_rcu")]),t._v("，\n和发包类似都是调用"),a("code",[t._v("virtqueue_pop")]),t._v("从前端获取virtqueue element，\n将报文数据填充到vring中然后"),a("code",[t._v("virtio_notify")]),t._v("注入中断通知前端驱动取结果。")]),t._v(" "),a("p",[t._v("这里不得不吐槽一下，为啥收包函数取名要叫"),a("code",[t._v("tap_send")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_4-参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-参考文献"}},[t._v("#")]),t._v(" 4. 参考文献")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("virtio spec v1.1 "),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://ozlabs.org/~rusty/virtio-spec/virtio-paper.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Towards a De-Facto Standard For Virtual"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("https://github.com/qemu/qemu/blob/master/hw/net/virtio-net.c")]),t._v(" "),a("li",[t._v("https://github.com/torvalds/linux/blob/master/drivers/net/virtio_net.c")])])])}),[],!1,null,null,null);s.default=e.exports}}]);