(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{1655:function(e,t,a){"use strict";a.r(t);var r=a(42),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"qmp简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qmp简介"}},[e._v("#")]),e._v(" QMP简介")]),e._v(" "),a("p",[e._v("QMP的全称是QEMU Machine Protocol，是一种以json格式为基础的协议，允许用户通过该接口查询、配置QEMU实例。")]),e._v(" "),a("p",[e._v("QEMU官方文档中对QMP的解释是：")]),e._v(" "),a("ul",[a("li",[e._v("Lightweight, text-based, easy to parse data format")]),e._v(" "),a("li",[e._v("Asynchronous messages support (events)")]),e._v(" "),a("li",[e._v("Capabilities negotiation")]),e._v(" "),a("li",[e._v("API/ABI stability guarantees")])]),e._v(" "),a("p",[e._v("很多基于QEMU的应用都使用了QMP接口，比如著名的虚拟化中间件libvirt，对QEMU实例的操作就是使用了QMP接口。此外，还可以通过telnet、qmp-shell script等方式使用QMP接口，QEMU的官方文档进行了"),a("a",{attrs:{href:"https://wiki.qemu.org/Documentation/QMP",target:"_blank",rel:"noopener noreferrer"}},[e._v("详细介绍"),a("OutboundLink")],1),e._v("。本博客主要使用libvirt来展示QMP相关接口，通过libvirt提供的virsh工具可以直接调用QMP接口。")]),e._v(" "),a("h3",{attrs:{id:"_1-环境准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-环境准备"}},[e._v("#")]),e._v(" 1 环境准备")]),e._v(" "),a("ul",[a("li",[e._v("支持虚拟化的Server，装有QEMU、libvirt等相关虚拟化组件")]),e._v(" "),a("li",[e._v("虚拟机，可以通过virsh与其交互")])]),e._v(" "),a("h3",{attrs:{id:"_2-相关命令使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-相关命令使用"}},[e._v("#")]),e._v(" 2 相关命令使用")]),e._v(" "),a("h4",{attrs:{id:"_2-1-通过virsh-list查看虚拟机状态是否正常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-通过virsh-list查看虚拟机状态是否正常"}},[e._v("#")]),e._v(" 2.1 通过"),a("code",[e._v("virsh list")]),e._v("查看虚拟机状态是否正常")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Linux:~ # virsh list\n Id   Name     State\n------------------------\n 1    ubuntu   running\n")])])]),a("h4",{attrs:{id:"_2-2-查看qemu-monitor-command子命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-查看qemu-monitor-command子命令"}},[e._v("#")]),e._v(" 2.2 查看"),a("code",[e._v("qemu-monitor-command")]),e._v("子命令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Linux:~ # virsh qemu-monitor-command --help\n  NAME\n    qemu-monitor-command - QEMU Monitor Command\n\n  SYNOPSIS\n    qemu-monitor-command <domain> [--hmp] [--pretty] [--return-value] {[--cmd] <string>}...\n\n  DESCRIPTION\n    QEMU Monitor Command\n\n  OPTIONS\n    [--domain] <string>  domain name, id or uuid\n    --hmp            command is in human monitor protocol\n    --pretty         pretty-print any qemu monitor protocol output\n    --return-value   extract the value of the 'return' key from the returned string\n    [--cmd] <string>  command\n")])])]),a("p",[a("code",[e._v("qemu-monitor-command")]),e._v("子命令是"),a("code",[e._v("virsh")]),e._v("调用QMP的接口，通过帮助文档我们可以看到其基本用法。\n其中 "),a("strong",[e._v("--pretty")]),e._v(" 可以格式化相关json输出， "),a("strong",[e._v("--hmp")]),e._v(" 是将复杂的QMP接口简化成了便于手动执行的接口，"),a("strong",[e._v("--return-value")]),e._v("仅输出返回内部，忽略状态码等信息。")]),e._v(" "),a("h4",{attrs:{id:"_2-3-调用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-调用示例"}},[e._v("#")]),e._v(" 2.3 调用示例")]),e._v(" "),a("ol",[a("li",[e._v('virsh qemu-monitor-command ubuntu \'{"execute":"query-commands"}\'')])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Linux:~ # virsh qemu-monitor-command ubuntu \'{"execute":"query-commands"}\' \n{"return":[{"name":"netdev_add"},{"name":"device_add"},{"name":"query-QMP-schema"},\n{"name":"query-memory-size-summary"},{"name":"closefd"},{"name":"getfd"},\n{"name":"set_link"},{"name":"query-uuid"},{"name":"query-kvm"},{"name":"query-name"},\n    ···\n    忽略部分输出\n    ···\n{"name":"add_client"},{"name":"query-commands"},{"name":"query-version"},{"name":"QMP_capabilities"}],"id":"libvirt-21"}\n')])])]),a("p",[e._v("可以看到QMP提供了非常多的接口供使用，包括"),a("code",[e._v("query-commands")]),e._v("、"),a("code",[e._v("query-qmp-schema")]),e._v("、"),a("code",[e._v("query-kvm")]),e._v("等查询类接口，"),a("code",[e._v("add_client")]),e._v("、"),a("code",[e._v("set_link")]),e._v("等修改设置的接口。")]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v('virsh qemu-monitor-command ubuntu --pretty \'{"execute":"query-memory-size-summary"}\'')])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Linux:~ # virsh qemu-monitor-command ubuntu --pretty \'{"execute":"query-memory-size-summary"}\'\n{\n  "return": {\n    "base-memory": 4294967296,\n    "plugged-memory": 0\n  },\n  "id": "libvirt-30"\n}\n\n')])])]),a("p",[e._v("加入 "),a("strong",[e._v("--pretty")]),e._v("参数后，输出被格式化。")]),e._v(" "),a("h4",{attrs:{id:"_2-4-hmp格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-hmp格式"}},[e._v("#")]),e._v(" 2.4 HMP格式")]),e._v(" "),a("p",[e._v("上面提到"),a("code",[e._v("qemu-monitor-command")]),e._v("子命令支持 "),a("strong",[e._v("--hmp")]),e._v("参数，是对QMP命令的简化，大大降低了使用QMP命令的复杂度，并且部分HMP就是对QMP命令进行了封装，底层实际只用的还是QMP命令。但是通过QEMU的官方说明看，HMP是QEMU上的简单交互式监视器，主要为调试和简单的人类使用而设计，更高级别的工具应该连接到QMP , QMP才能提供一个稳定的JSON接口，以便于进行可靠的解析。\n以查询虚拟机内存为例，使用HMP可以简化命令的输入和输出：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Linux:~ # virsh qemu-monitor-command ubuntu --HMP info memory_size_summary\nbase memory: 4294967296\nplugged memory: 0\n")])])]),a("h3",{attrs:{id:"_3-编写新的qmp命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-编写新的qmp命令"}},[e._v("#")]),e._v(" 3 编写新的QMP命令")]),e._v(" "),a("p",[e._v("下面将展示如何向QEMU中增加一个hello world接口。")]),e._v(" "),a("h4",{attrs:{id:"_3-1-qemu源码编译安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-qemu源码编译安装"}},[e._v("#")]),e._v(" 3.1 QEMU源码编译安装")]),e._v(" "),a("p",[e._v("这里仅展示了基础步骤，还要根据不同的平台和机器安装对应的依赖。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clone https://git.qemu.org/git/qemu.git\ncd qemu\ngit submodule init\ngit submodule update --recursive\n./configure\nmake\n")])])]),a("h4",{attrs:{id:"_3-2-编写qmp接口源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-编写qmp接口源码"}},[e._v("#")]),e._v(" 3.2 编写QMP接口源码")]),e._v(" "),a("h5",{attrs:{id:"_3-2-3-增加qmp接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-增加qmp接口"}},[e._v("#")]),e._v(" 3.2.3 增加QMP接口")]),e._v(" "),a("p",[e._v("QEMU提供了一套QMP接口实现框架，在QEMU的源码的qapa路径下有多个***.json， 这些都是不同分类的QMP接口的定义。这里选择在qapi/misc.json文件，增加一个hell world接口声明。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("##\n# @hello-world:\n# Print a client provided string to the standard output stream.\n#\n# @message: string to be printed\n#\n# Returns: Nothing on success.\n#\n# Notes: if @message is not provided, the \"Hello, world\" string will\n#        be printed instead\n# Since: <next qemu stable release, eg. 1.0>\n##\n{ 'command': 'hello-world', 'data': { '*message': 'str' } }\n")])])]),a("h5",{attrs:{id:"_3-2-3-实现qmp函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-实现qmp函数"}},[e._v("#")]),e._v(" 3.2.3 实现QMP函数")]),e._v(" "),a("p",[e._v("在monitor/qmp-cmds.c添加函数实现")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('void qmp_hello_world(bool has_message, const char *message, Error **errp)\n{\n    if (has_message) {\n        printf("%s\\n", message);\n    } else {\n        printf("Hello, world\\n");\n    }\n}\n\n')])])]),a("h5",{attrs:{id:"_3-2-4-实现hmp命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-4-实现hmp命令"}},[e._v("#")]),e._v(" 3.2.4 实现HMP命令")]),e._v(" "),a("p",[e._v("在hmp-commands.hx添加接口")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    {\n        .name       = "hello-world",\n        .args_type  = "message:s?",\n        .params     = "hello-world [message]",\n        .help       = "Print message to the standard output",\n        .cmd        = hmp_hello_world,\n    },\n')])])]),a("p",[e._v("在include/monitor/hmp.h添加函数声明")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void hmp_hello_world(Monitor *mon, const QDict *qdict);\n")])])]),a("p",[e._v("在monitor/hmp-cmds.c添加函数实现")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('void hmp_hello_world(Monitor *mon, const QDict *qdict)\n{\n    const char *message = qdict_get_try_str(qdict, "message");\n    Error *err = NULL;\n\n    qmp_hello_world(!!message, message, &err);\n    if (err) {\n        monitor_printf(mon, "%s\\n", error_get_pretty(err));\n        error_free(err);\n        return;\n    }\n}\n')])])]),a("h5",{attrs:{id:"_3-2-5-验证qmp命令实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-5-验证qmp命令实现"}},[e._v("#")]),e._v(" 3.2.5 验证QMP命令实现")]),e._v(" "),a("p",[e._v("编写完成上述代码后，重现编译安装，修改虚拟机xml中的"),a("emulator",[e._v("标签，使用自定义的QEMU启动虚拟机，验证新的QMP命令。")])],1),e._v(" "),a("ol",[a("li",[e._v("查看QMP命令是否存在")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Linux:~ # virsh qemu-monitor-command ubuntu --pretty \'{"execute":"query-commands"}\' | grep hello\n      "name": "hello-world"\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("调用QMP命令")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Linux:~ # virsh qemu-monitor-command ubuntu --pretty \'{ "execute": "hello-world", "arguments": { "message": "We love qemu" } }\'\n{\n  "return": {\n\n  },\n  "id": "libvirt-17"\n}\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("查看HMP命令是否存在")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Linux:~ # virsh qemu-monitor-command ubuntu --hmp help | grep hello\nhello-world hello-world [message] -- Print message to the standard output\n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);