(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{1748:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"iommu-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iommu-介绍"}},[t._v("#")]),t._v(" IOMMU 介绍")]),t._v(" "),a("p",[t._v("在计算机体系结构中IOMMU（Input Output Memory Management Unit）是将设备直接内存访问（DMA）的IO总线和物理内存连接的内存管理单元，和传统的MMU一样，IOMMU将设备可见的虚拟地址（IOVA）映射到物理地址。不同的平台有不同的IOMMU，如Intel的IOMMU，PCIE图形卡使用的图形重映射表（GART），Arm平台的IOMMU是SMMU（System Memory Management），它们主要功能都是完成设备可见的IOVA到物理地址的映射。")]),t._v(" "),a("p",[t._v("CPU和外设访问物理内存：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    +---------------------+\n    |      Main Memory    |\n    +---------------------+\n               |\n              pa\n               |\n         -------------\n         |           |\n    +--------+   +--------+\n    | IOMMU  |   |  MMU   |\n    +--------+   +--------+\n         |           |\n       iova          va\n         |           |\n    +--------+   +--------+\n    | Device |   |  CPU   |\n    +--------+   +--------+\n")])])]),a("p",[t._v("相对于设备DMA直接访问内存，使用IOMMU有很明显的优点：")]),t._v(" "),a("ul",[a("li",[t._v("可以在内存中分配比较大的非连续区域，IOMMU可以将连续的虚拟地址映射到零散的物理地址")]),t._v(" "),a("li",[t._v("即使设备不支持足够长的内存寻址来访问整个物理内存，也可以通过IOMMU来完成整个内存的寻址。比如x86计算机可以额通过物理地址扩展（PAE）功能寻址超过4GB的内存，但是普通的32位PCI设备则无法寻址超过4GB的内存，有IOMMU则可以让设备访问整个物理内存。")]),t._v(" "),a("li",[t._v("由于设备无法直接读取或写入映射的物理内存，可以保护内存免受恶意设备进行DMA攻击和尝试错误的内存传输。")]),t._v(" "),a("li",[t._v("在虚拟化场景中，Guest OS可以使用非专门位虚拟化设计的硬件，比如将高性能硬件如显卡直通给虚拟机，通过DMA直接访问内存。在虚拟化环境中，所有的内存地址都由虚拟化程序（如Qemu）进行重映射，Guest OS使用DMA直接访问内存时会发生故障，只有IOMMU完成了重映射之后，Guest OS才可以驱动设备正确进行DMA访存。")]),t._v(" "),a("li",[t._v("在有些体系结构中，IOMMU还以类似地址重映射的方式进行中断重映射。")]),t._v(" "),a("li",[t._v("IOMMU还可以支持外围设备内存分页，使用PCI-SIG PCIe地址转换服务（ATS）PRI扩展的外围设备可以检测并通知内存管理服务。")])]),t._v(" "),a("p",[t._v("相对于DMA直接访问物理内存，使用IOMMU的缺点主要体现在额外的性能和内存开销，地址翻译和缺页处理会增加额外的性能开销，并且IOMMU需要在内存中为IO页表分配空间，在有些情况下IOMMU和CPU共享页表可以避免这一内存开销，比如设备和CPU共享虚拟地址SVA。")]),t._v(" "),a("h2",{attrs:{id:"arm-smmu-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arm-smmu-数据结构"}},[t._v("#")]),t._v(" Arm SMMU 数据结构")]),t._v(" "),a("p",[t._v("SMMU（System Memory Management Unit）是Arm平台的IOMMU，\nSMMU为设备提供用设备可见的IOVA地址来访问物理内存的能力，体系结构中可能存在多个设备使用IOVA经过IOMMU来访问物理内存，IOMMU需要能够区分不同的设备，从而为每个设备引入了一个Stream ID，指向对应的STE（Stream Table Entry），所有的STE在内存中以数组的形式存在，SMMU记录STE数组的首地址。在操作系统扫描设备的时候会为其分配独有的Stream ID简称sid，设备通过IOMMU进行访存的所有配置都写在对应sid的STE中。")]),t._v(" "),a("p",[t._v("Stream Table：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                  +-------+\nstrtab_base ----- | STE 0 |\n                  | STE 1 |\nStreamID[n:0] ->  | STE 2 |\n                  | STE 3 |\n                  +-------+\n")])])]),a("p",[t._v("STE表项中保存了从IOVA到PA的地址翻译过程，为了适应虚拟化场景下的访存需求，SMMU设计了类似EPT页表的两级地址翻译过程。Stage 1 完成从虚拟地址VA到中间地址IPA的翻译过程，stage 2 完成从IPA到实际物理地址的翻译过程。")]),t._v(" "),a("p",[t._v("Stream Table Entry：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Stream Table Entry (STE)\n+-----------------------+ \n| Config | S1ContextPtr | -> CD -> Stage 1 translation tables\n+-----------------------+\n|  VMID  | S2TTB        | -> Stage 2 translation tables\n+-----------------------+\n| Other attributes,     |\n| configuration         |\n+-----------------------+\n")])])]),a("p",[t._v("对于非虚拟化场景，设备使用IOVA经过IOMMU进行DMA只需要经过Stage 1的地址转换，因为多个设备可能使用一个设备，所以每个设备的STE中还记录了CD（Context Descriptor）表的信息，由S1ContextPtr指向内存中CD表的基地址，CD表也是一个数组，使用SubstreamID来进行访存，简称ssid，也叫做pasid，pasid是与进程关联的id，用于区分不同进程的虚拟地址空间。在使用pasid找到对应的CD表项之后，也就找到了Stage 1地址翻译的IO页表，保存在TTB0和TTB1中。")]),t._v(" "),a("p",[t._v("Context Descriptor：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                  +-------+\nS1ContextPtr ---- |  CD 0 |\n                  |  CD 1 |\nSubStreamID   ->  |  CD 2 |\n                  |  CD 3 |\n                  +-------+\n\nContext Desctriptor (CD)\n+-----------------------+ \n| Configuration | TTB0  | \n+-----------------------+\n|      ASID     | TTB1  |\n+-----------------------+\n")])])]),a("p",[t._v("值得一提的是，在一般情况下，进程通过设备驱动让设备进行DMA时使用的IOVA由内核态驱动分配，当存在多个进程时，将该内核态的IOVA映射到进程的虚拟地址空间即可，也就是说不同进程在DMA时其实使用的是相同的IOVA地址空间，所以这时只需要第0项CD即可，一般只需要在CD0中保存IO页表的基地址。然而，当需要统一设备的IO地址空间和进程的虚拟地址空间，如共享虚拟地址访问（SVA）时，则会用到多个CD项分别绑定不同进程的虚拟地址空间。")]),t._v(" "),a("p",[t._v("设备经过SMMU进行地址翻译是一个很复杂的过程，首先会根据设备的sid（Stream ID）找到对应的STE项，STE项中的配置信息记录了是否需要Bypass Stage 1 的地址翻译，Bypass意味着直接使用PA（或IPA），如果没有Bypass会根据sid（Substream ID）找到对应CD项，CD项中记录了Stage 1地址翻译的页表，会将VA翻译成IPA，然后如果STE中还配置了Stage 2 的页表翻译，会根据Stage 2地址翻译的页表，将IPA翻译成最终的PA地址，如果没有配置Stage 2地址翻译，则之前获取到的IPA就是最终的PA地址。")]),t._v(" "),a("p",[t._v("SMMU地址翻译过程：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                         VA\n                          |\n                    -----------\n                    |         |\n+---------------------+       |\n| Stage 1 translation |    Bypass\n|        VA->IPA      |       |\n+---------------------+       |\n                    |         |\n                    -----------\n                          |\n                         IPA\n                          |\n                    -----------\n                    |         |\n+---------------------+       |\n| Stage 2 translation |    Bypass\n|        IPA->VA      |       |\n+---------------------+       |\n                    |         |\n                    -----------\n                          |\n                         PA\n")])])]),a("h2",{attrs:{id:"arm-smmu-v3-初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arm-smmu-v3-初始化"}},[t._v("#")]),t._v(" Arm SMMU V3 初始化")]),t._v(" "),a("p",[t._v("所有IOMMU相关的驱动都在内核 drivers/iommu 目录下面，arm平台的最新的架构SMMU-v3的驱动为arm-smmu-v3.c，SMMU本身是一个平台设备，"),a("code",[t._v("struct arm_smmu_device")]),t._v("结构体在内存中管理SMMU设备的关键信息，内核对SMMU设备本身的初始化过程主要就是在填充这个结构体。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* An SMMUv3 instance */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("arm_smmu_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("device")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" __iomem\t\t\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tu32\t\t\t\tfeatures"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tu32\t\t\t\toptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("arm_smmu_cmdq")]),t._v("\t\tcmdq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("arm_smmu_evtq")]),t._v("\t\tevtq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("arm_smmu_priq")]),t._v("\t\tpriq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\t\t\t\tgerr_irq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\t\t\t\tcombined_irq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tu32\t\t\t\tsync_nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v("\t\t\tias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* IPA */")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v("\t\t\toas"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* PA */")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v("\t\t\tpgsize_bitmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("ARM_SMMU_MAX_ASIDS")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\t\t\tasid_bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECLARE_BITMAP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("asid_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ARM_SMMU_MAX_ASIDS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("ARM_SMMU_MAX_VMIDS")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\t\t\tvmid_bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DECLARE_BITMAP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vmid_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ARM_SMMU_MAX_VMIDS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\t\t\tssid_bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\t\t\tsid_bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("arm_smmu_strtab_cfg")]),t._v("\tstrtab_cfg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* IOMMU core code handle */")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("iommu_device")]),t._v("\t\tiommu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("驱动加载的入口为 arm_smmu_device_probe 函数，其主要做了如下几件事情：")]),t._v(" "),a("ol",[a("li",[t._v("从dts的SMMU节点或ACPI的SMMU配置表中读取SMMU中断等属性")]),t._v(" "),a("li",[t._v("用struct resource 来从设备获取到其资源信息，并IO重映射")]),t._v(" "),a("li",[t._v("probe SMMU的硬件特性")]),t._v(" "),a("li",[t._v("中断和事件队列初始化")]),t._v(" "),a("li",[t._v("建立STE表")]),t._v(" "),a("li",[t._v("设备reset")]),t._v(" "),a("li",[t._v("将SMMU注册到IOMMU")])]),t._v(" "),a("h3",{attrs:{id:"_1-读取dts的smmu节点信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-读取dts的smmu节点信息"}},[t._v("#")]),t._v(" 1. 读取dts的SMMU节点信息")]),t._v(" "),a("p",[t._v("函数 arm_smmu_device_dt_probe 读取节点信息主要是从 smmu->dev->of_node中读取对应的属性，并记录到 smmu->options 中，此外还会检查 DMA 是否支持 coherent， 是的话会设置COHERENCY特性。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("of_dma_is_coherent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("of_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("features "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" ARM_SMMU_FEAT_COHERENCY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-获取设备资源信息并io重映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取设备资源信息并io重映射"}},[t._v("#")]),t._v(" 2. 获取设备资源信息并IO重映射")]),t._v(" "),a("p",[t._v("获取到SMMU设备的资源信息保存在 "),a("code",[t._v("struct resource")]),t._v(" 结构体中，记录IO基地址，并用 smmu->base 记录完成IO重映射之后的基地址。之后就可以通过 smmu->base 加偏移读写SMMU的硬件寄存器。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Base address */")]),t._v("\nres "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("platform_get_resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" IORESOURCE_MEM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nioaddr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsmmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("devm_ioremap_resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-probe-smmu硬件特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-probe-smmu硬件特性"}},[t._v("#")]),t._v(" 3. probe SMMU硬件特性")]),t._v(" "),a("p",[t._v("函数 arm_smmu_device_hw_probe 通过读取 SMMU 的寄存器获取SMMU的硬件特性，")]),t._v(" "),a("p",[t._v("IDR0寄存器：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("reg = readl_relaxed(smmu->base + ARM_SMMU_IDR0);\n")])])]),a("ul",[a("li",[t._v("是否支持：两级STE表、两级CD表")]),t._v(" "),a("li",[t._v("是否支持：PRI、ATS、SEV、MSI、HYP、STALL、Stage 1、Stage 2")]),t._v(" "),a("li",[t._v("获取：ias长度、asid_bits、vmid_bits")])]),t._v(" "),a("p",[t._v("IDR1寄存器：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readl_relaxed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ARM_SMMU_IDR1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("获取：evtq和priq的队列长度、ssid_bits、sid_bits、")])]),t._v(" "),a("p",[t._v("IDR5寄存器：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readl_relaxed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("base "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ARM_SMMU_IDR5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("获取：evtq最多能stall的的数量")]),t._v(" "),a("li",[t._v("是否支持：VAX、oas长度、pgsize_bitmap")])]),t._v(" "),a("h3",{attrs:{id:"_4-中断和事件队列初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-中断和事件队列初始化"}},[t._v("#")]),t._v(" 4. 中断和事件队列初始化")]),t._v(" "),a("p",[t._v("函数 arm_smmu_init_structures 会完成内存中的数据结构的初始化，包括三条队列evtq、priq、cmdq，cmdq用于SMMU驱动向硬件发送命令，比如刷新TLB、写CD内容等，event队列用于SMMU上挂载的platform设备向驱动发送异常消息，priq队列功能类似只不过用于挂载的PCI设备。event队列和pri队列分别有各自的中断号完成异常事件的通知，此外还有一个gerror的中断号用于上报不可恢复（unrecoverable）的严重错误，其直接中断处理不需要队列。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("platform_get_irq_byname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"combined"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("combined_irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" irq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("platform_get_irq_byname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eventq"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("evtq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" irq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("platform_get_irq_byname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"priq"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("priq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" irq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("platform_get_irq_byname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pdev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gerror"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("gerr_irq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" irq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Initialise in-memory data structures */")]),t._v("\nret "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arm_smmu_init_structures")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在驱动进行SMMU设备reset的时候，arm_smmu_setup_unique_irqs 会注册相应的事件处理，eventq和priq会注册内核线程完成事件处理，而对于不可恢复错误gerror则直接注册函数完成中断处理。")]),t._v(" "),a("h3",{attrs:{id:"_5-建立ste表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-建立ste表"}},[t._v("#")]),t._v(" 5. 建立STE表")]),t._v(" "),a("p",[t._v("根据SMMU的配置不同，可以建立两级或者线性STE表，相对于线性STE表，两级STE表不需要一开始创建所有的STE项，只需要先分配第一级的目录项即可。对于STE线性表，根据sid_bits和STE项的大小，在内存中用dma分配一块连续的内存，在配置中记录其基地址，然后将所有的STE项配置成默认情况下的bypass模式。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arm_smmu_init_strtab_linear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("arm_smmu_device")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("strtab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tu64 reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tu32 size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("arm_smmu_strtab_cfg")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cfg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("strtab_cfg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tsize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("sid_bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STRTAB_STE_DWORDS "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tstrtab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dmam_alloc_coherent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cfg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("strtab_dma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\t     GFP_KERNEL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" __GFP_ZERO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\tcfg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("strtab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strtab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tcfg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("num_l1_ents "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("sid_bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Configure strtab_base_cfg for a linear table covering all SIDs */")]),t._v("\n\treg  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FIELD_PREP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STRTAB_BASE_CFG_FMT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STRTAB_BASE_CFG_FMT_LINEAR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\treg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FIELD_PREP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STRTAB_BASE_CFG_LOG2SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("sid_bits"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tcfg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("strtab_base_cfg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arm_smmu_init_bypass_stes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strtab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cfg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("num_l1_ents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_6-设备-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-设备-reset"}},[t._v("#")]),t._v(" 6. 设备 reset")]),t._v(" "),a("p",[t._v("函数 arm_smmu_device_reset 会进行设备的复位操作，通过前面获取到的设备寄存器，对控制寄存器CR1和CR2写入队列内存属性等信息，对STRTAB_BASE寄存器写入STE表的基地址和配置信息，将三条队列在内存中的基地址、队首和队尾信息分别写入对应的寄存器中，之后 reset 会调用arm_smmu_setup_irqs注册中断事件的处理操作。")]),t._v(" "),a("h3",{attrs:{id:"_7-将smmu注册到iommu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-将smmu注册到iommu"}},[t._v("#")]),t._v(" 7. 将SMMU注册到IOMMU")]),t._v(" "),a("p",[t._v("不同平台的IOMMU设备在Linux内核中抽象出了统一的IOMMU接口，SMMU的初始化会在sys目录下面注册一个smmu->iommu设备节点，并且将arm_smmu_ops注册给该设备以及系统PCI总线和平台设备总线。这样当使用IOMMU公共接口时，会调用smmu提供的功能，具体可以查看arm_smmu_ops中提供的各种IOMMU接口实现。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iommu_device_sysfs_add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("iommu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"smmu3.%pa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ioaddr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iommu_device_set_ops")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("iommu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arm_smmu_ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iommu_device_set_fwnode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("iommu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("fwnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iommu_device_register")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("smmu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("iommu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bus_set_iommu")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pci_bus_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arm_smmu_ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bus_set_iommu")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("platform_bus_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arm_smmu_ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"iommu与dma"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iommu与dma"}},[t._v("#")]),t._v(" IOMMU与DMA")]),t._v(" "),a("p",[t._v("IOMMU的主要功能之一就是避免设备在进行DMA访问内存的时候直接使用物理地址不安全，所以就产生了IOVA地址，在dma_alloc分配内存的时候，首先在IO地址空间分配一个IOVA地址，然后在IOMMU管理的页表中建立IOVA和dma_alloc分配的物理地址的映射关系，外设在进行dma的时候，只需要使用IOVA地址即可。")]),t._v(" "),a("p",[t._v("调用 dma alloc 系列函数分配内存最终会调到 iommu_dma_alloc 函数，其会分配iova和实际的物理内存，并用iommu_map建立iova到物理内存的映射关系，也就是找到设备对应的STE，并找到CD项（一般是第0项），然后找到内存中对应的页表，将iova到物理地址的映射写入页表中，arm SMMU 相关的页表操作在 io-pgtable.c中完成。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("iommu_dma_alloc\n      pages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__iommu_dma_alloc_pages")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" alloc_sizes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" PAGE_SHIFT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gfp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      iova "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iommu_dma_alloc_iova")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("coherent_dma_mask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iommu_map_sg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" iova"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sgt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sgl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sgt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("orig_nents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prot\n")])])]),a("p",[t._v("可以有多种方式bypass掉IOMMU，首先Linux提供了iommu.passthrough的方式，可以配置dma默认不走iommu，通过软件的地址映射技术swiotlb来访存；其次，SMMU v3驱动中提供了参数可以bypass掉某个SMMU；第三十可以在ACPI或者DTS中不配置对应的SMMU节点，这样系统加载的时候就不会probe对应的SMMU了。")]),t._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("IOMMU的主要功能就是为设备访问物理内存提供IOVA到PA的映射，使得设备不会直接使用物理地址来访存比较安全。Arm SMMUv3 作为IOMMU的一种具体实现，为其提供相应的接口。与IOMMU相关的包括设备进行DMA操作，VFIO直通将设备硬件能力安全的暴露给用户态等，本质上都是为了建立设备能够识别的IOVA到实际物理地址的映射关系。")]),t._v(" "),a("h2",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference：")]),t._v(" "),a("ul",[a("li",[t._v("https://en.wikipedia.org/wiki/Input%E2%80%93output_memory_management_unit")]),t._v(" "),a("li",[t._v("https://developer.arm.com/documentation/ihi0070/latest")]),t._v(" "),a("li",[t._v("https://kernel.taobao.org/2020/06/ARM-SMMU-and-IOMMU/")])])])}),[],!1,null,null,null);s.default=e.exports}}]);