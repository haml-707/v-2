(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{1653:function(e,t,v){"use strict";v.r(t);var _=v(42),r=Object(_.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"ebpf-introduce"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ebpf-introduce"}},[e._v("#")]),e._v(" eBPF introduce")]),e._v(" "),_("h2",{attrs:{id:"ebpf-发展历程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ebpf-发展历程"}},[e._v("#")]),e._v(" eBPF 发展历程")]),e._v(" "),_("ul",[_("li",[e._v("1992年：BPF全称Berkeley Packet Filter，诞生初衷提供一种内核中自定义报文过滤的手段（类汇编），提升抓包效率。（tcpdump）")]),e._v(" "),_("li",[e._v("2011年：linux kernel 3.2版本对BPF进行重大改进，引入BPF JIT，使其性能得到大幅提升。")]),e._v(" "),_("li",[e._v("2014年： linux kernel 3.15版本，BPF扩展成eBPF，其功能范畴扩展至：内核跟踪、性能调优、协议栈QoS等方面。与之配套改进包括：扩展BPF ISA指令集、提供高级语言（C）编程手段、提供MAP机制、提供Help机制、引入Verifier机制等。")]),e._v(" "),_("li",[e._v("2016年：linux kernel 4.8版本，eBPF支持XDP，进一步拓展该技术在网络领域的应用。随后Netronome公司提出eBPF硬件卸载方案。")]),e._v(" "),_("li",[e._v("2018年：linux kernel 4.18版本，引入BTF，将内核中BPF对象（Prog/Map）由字节码转换成统一结构对象，这有利于eBPF对象与Kernel版本的配套管理，为eBPF的发展奠定基础。")]),e._v(" "),_("li",[e._v("2018年：从kernel 4.20版本开始，eBPF成为内核最活跃的项目之一，新增特性包括：sysctrl hook、flow dissector、struct_ops、lsm hook、ring buffer等。场景范围覆盖容器、安全、网络、跟踪等。")])]),e._v(" "),_("h2",{attrs:{id:"ebpf原理及功能介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ebpf原理及功能介绍"}},[e._v("#")]),e._v(" eBPF原理及功能介绍")]),e._v(" "),_("h3",{attrs:{id:"宏观视角"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#宏观视角"}},[e._v("#")]),e._v(" 宏观视角")]),e._v(" "),_("p",[e._v("从宏观视角看eBPF，我们将其与kernel进行对比看，便于我们更粗粒度的理解eBPF原理：")]),e._v(" "),_("ul",[_("li",[e._v("内核的本质是事件驱动机制，事件由系统调用/系统中断产生。")]),e._v(" "),_("li",[e._v("eBPF也是事件驱动机制，其采用sandbox技术，与内核隔离。从原理上两者相近，只是能力不同而已。")])]),e._v(" "),_("img",{attrs:{src:v(946)}}),e._v(" "),_("h3",{attrs:{id:"微观视角"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微观视角"}},[e._v("#")]),e._v(" 微观视角")]),e._v(" "),_("p",[e._v("归纳其软件架构特点：")]),e._v(" "),_("ul",[_("li",[e._v("采用sandbox技术，旁挂于内核，与用户态应用软件、内核、内核模块（网卡驱动）、Device编程、Host加速等均有交互。")]),e._v(" "),_("li",[e._v("通过Helper/hook机制，eBPF与内核可以交换数据/逻辑；通过Map/eBPF Prog机制,eBPF可以与应用程序交换数据/逻辑。最终效果：应用可以通过eBPF改变内核数据/逻辑，或者说用户程序将运行在内核态。")]),e._v(" "),_("li",[e._v("用户编程接口：有限能力的高级语言（c/go/rust）编写eBPF Prog。")]),e._v(" "),_("li",[e._v("编译方式：通过Clang将其编译成eBPF定义的ISA指令，再由Host/Device JIT翻译成机器指令。")])]),e._v(" "),_("img",{attrs:{src:v(947)}}),e._v(" "),_("h3",{attrs:{id:"ebpf主要功能介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ebpf主要功能介绍"}},[e._v("#")]),e._v(" eBPF主要功能介绍")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[e._v("特性")])]),e._v(" "),_("th",[_("strong",[e._v("引入版本")])]),e._v(" "),_("th",[_("strong",[e._v("功能介绍")])]),e._v(" "),_("th",[_("strong",[e._v("应用场景")])])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("Tc-bpf")]),e._v(" "),_("td",[e._v("4.1")]),e._v(" "),_("td",[e._v("eBPF重构内核流分类")]),e._v(" "),_("td",[e._v("网络")])]),e._v(" "),_("tr",[_("td",[e._v("XDP")]),e._v(" "),_("td",[e._v("4.8")]),e._v(" "),_("td",[e._v("网络数据面编程技术（主要面向L2/L3层业务）")]),e._v(" "),_("td",[e._v("网络")])]),e._v(" "),_("tr",[_("td",[e._v("Cgroup socket")]),e._v(" "),_("td",[e._v("4.10")]),e._v(" "),_("td",[e._v("Cgroup内socket支持eBPF扩展逻辑")]),e._v(" "),_("td",[e._v("容器")])]),e._v(" "),_("tr",[_("td",[e._v("AF_XDP")]),e._v(" "),_("td",[e._v("4.18")]),e._v(" "),_("td",[e._v("网络原始报文直送用户态（类似DPDK）")]),e._v(" "),_("td",[e._v("网络")])]),e._v(" "),_("tr",[_("td",[e._v("Sockmap")]),e._v(" "),_("td",[e._v("4.20")]),e._v(" "),_("td",[e._v("支持socket短接")]),e._v(" "),_("td",[e._v("容器")])]),e._v(" "),_("tr",[_("td",[e._v("Device  JIT")]),e._v(" "),_("td",[e._v("4.20")]),e._v(" "),_("td",[e._v("JIT/ISA解耦，host可以编译指定device形态的ISA指令")]),e._v(" "),_("td",[e._v("异构编程")])]),e._v(" "),_("tr",[_("td",[e._v("Cgroup sysctl")]),e._v(" "),_("td",[e._v("5.2")]),e._v(" "),_("td",[e._v("Cgroup内支持控制系统调用权限")]),e._v(" "),_("td",[e._v("容器")])]),e._v(" "),_("tr",[_("td",[e._v("Struct ops  Prog ext")]),e._v(" "),_("td",[e._v("5.3")]),e._v(" "),_("td",[e._v("内核逻辑可动态替换  eBPF  Prog可动态替换")]),e._v(" "),_("td",[e._v("框架基础")])]),e._v(" "),_("tr",[_("td",[e._v("Bpf trampoline")]),e._v(" "),_("td",[e._v("5.5")]),e._v(" "),_("td",[e._v("三种用途：  1.内核中代替K(ret)probe,性能更优  2.eBPF  Prog中使用，解决eBPF Prog调试问题  3.实现eBPF  Prog动态链接功能（未来功能）")]),e._v(" "),_("td",[e._v("性能跟踪")])]),e._v(" "),_("tr",[_("td",[e._v("KRSI（lsm + eBPF）")]),e._v(" "),_("td",[e._v("5.7")]),e._v(" "),_("td",[e._v("内核运行时安全策略可定制")]),e._v(" "),_("td",[e._v("安全")])]),e._v(" "),_("tr",[_("td",[e._v("Ring  buffer")]),e._v(" "),_("td",[e._v("5.8")]),e._v(" "),_("td",[e._v("提供CPU间共享的环形buffer，并能实现跨CPU的事件保序记录。用以代替perf/ftrace等buffer。")]),e._v(" "),_("td",[e._v("跟踪/性能分析")])])])]),e._v(" "),_("p",[e._v("备注：BPF社区还在快速发展中，众多高级特性可以参考kernel社区。")]),e._v(" "),_("h2",{attrs:{id:"ebpf应用场景介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ebpf应用场景介绍"}},[e._v("#")]),e._v(" eBPF应用场景介绍")]),e._v(" "),_("h3",{attrs:{id:"网络场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络场景"}},[e._v("#")]),e._v(" 网络场景")]),e._v(" "),_("p",[e._v("在网络加速场景中，DPDK技术大行其道，在某些场景DPDK成了唯一选择。XDP的出现为厂商提供了一种新的选择，借助于kernel eBPF社区的蓬勃发展，为网络加速场景注入了一股清流。下面我们总结下两种差异：")]),e._v(" "),_("ul",[_("li",[e._v("[ ] DPDK优势/价值：优势（性能、生态）、价值（带动硬件销售）\n"),_("strong",[e._v("性能")]),e._v("：总体上XDP性能全面弱于DPDK（但是差距不大），注意：只是比较DPDK/XDP自身性能\n"),_("strong",[e._v("生态")]),e._v("：DPDK历经多年发展，生态体现在：驱动支持丰富、基础库丰富（无锁队列、大页内存、多核调度、性能分析工具等）、协议支持丰富（社区强大，例如VPP，支持众多协议ARP/VLAN/IP/MPLS等）\n"),_("strong",[e._v("价值")]),e._v("：将网络类专有硬件的工作转嫁给软件实现，进而拓展硬件厂商市场范围。")]),e._v(" "),_("li",[e._v("[ ] XDP优势：可编程、内核协同工作\n"),_("strong",[e._v("可编程")]),e._v("：在网络硬件智能化趋势下，可编程可以适用多种场景。\n"),_("strong",[e._v("内核协同")]),e._v("：XDP并不是完全bypass kernel，所以在必要的时候可以与内核协同工作，利于网络统一管理、部署。")]),e._v(" "),_("li",[e._v("[ ] DPDK一些固有缺陷：\n"),_("strong",[e._v("独占Device")]),e._v("：设备利用率低。\n"),_("strong",[e._v("部署复杂")]),e._v("：由于独占Device，网络部署需要与OS协议栈协同部署。\n"),_("strong",[e._v("开发困难")]),e._v("：DPDK定位就是网络数据面开发包，所以它对使用者要求具备专业网络知识、专业硬件知识，所以入门门槛高。\n"),_("strong",[e._v("端到端性能不高")]),e._v("：DPDK只是提供数据包从NIC到用户态软件的零拷贝，但是用户态传输协议依然需要CPU参与。所以端到端性能不高。")])]),e._v(" "),_("img",{attrs:{src:v(948)}}),e._v(" "),_("h4",{attrs:{id:"polycube项目介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#polycube项目介绍"}},[e._v("#")]),e._v(" Polycube项目介绍")]),e._v(" "),_("ul",[_("li",[e._v("[ ] Polycube项目目标是：\n重构网络数据面，通过XDP技术实现bypass内核的网络数据面。\n北向提供可编程接口，实现网络可编程的事实标准，可被不同解决方案集成（包括网络安全场景、容器场景、虚拟网络场景等）。\n南向可以逐步实现硬件offload，便于适配各种智能网卡。")]),e._v(" "),_("li",[e._v("[ ] Polycube使用场景包括：\nVNF场景\n容器网络数据面\n通用网络基础设施（包括iptables、lvs、nat等等）\n…")])]),e._v(" "),_("img",{attrs:{src:v(949)}}),e._v(" "),_("p",[e._v("VNF场景示例：")]),e._v(" "),_("img",{attrs:{src:v(950)}}),e._v(" "),_("h3",{attrs:{id:"容器场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#容器场景"}},[e._v("#")]),e._v(" 容器场景")]),e._v(" "),_("p",[e._v("背景：云原生场景中容器比虚拟化技术有着更好的低底噪、轻便、易管理等优点，基本已经成为云原生应用的事实标准。容器场景对网络需求实际是应用对网络的需求，即面向应用的网络服务。")]),e._v(" "),_("ul",[_("li",[e._v("[ ] 云原生应用特点以及对网络的诉求：\n生命周期短：要求提供基于PoD静态身份信息实施的网络安全策略。（不能基于IP/Port）\n租户间隔离：要求提供API级别的网络隔离策略。\nServiceMesh拓扑管理：要求提供side-car加速。\n服务入口位置透明：要求提供跨集群Ingress服务能力。\n安全策略跨集群：要求网络安全策略能够在集群间共享、继承。\n服务实例冗余保证高可用性：要求提供L3/4层LB能力。")])]),e._v(" "),_("h4",{attrs:{id:"cilium项目介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cilium项目介绍"}},[e._v("#")]),e._v(" Cilium项目介绍")]),e._v(" "),_("p",[e._v("Cilium 是一个纯开源软件，该软件用于透明地保护使用 Linux 容器管理平台（如 Docker 和 Kubernetes）部署的应用程序服务之间的网络连接。")]),e._v(" "),_("p",[e._v("Cilium 以eBPF作为其技术基础，为容器场景带来高性能、灵活、安全的容器网络解决方案。举例说明其功能：")]),e._v(" "),_("p",[e._v("功能1：使用K8S label代替IP/Port作为容器微隔离的标签")]),e._v(" "),_("img",{attrs:{src:v(951)}}),e._v(" "),_("p",[e._v("功能2：使用sockmap技术代替loopback环回通信，进而加速side-car")]),e._v(" "),_("img",{attrs:{src:v(952)}}),e._v(" "),_("h3",{attrs:{id:"云原生运维场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#云原生运维场景"}},[e._v("#")]),e._v(" 云原生运维场景")]),e._v(" "),_("p",[e._v("背景：容器场景的维测要求与内核提供的维测手段存在相当GAP，虽然内核维测手段种类繁多，但是诸多技术均是站在内核视角提供维测数据，无法支撑容器场景的维测需。\n解决方案：采用eBPF技术实现微服务视角的数据采集，实现容器平台的运维功能。行业里面比较成熟的项目sysdig/hubble。")]),e._v(" "),_("img",{attrs:{src:v(953)}}),e._v(" "),_("h3",{attrs:{id:"内核逻辑自定义-定制tcp拥塞算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内核逻辑自定义-定制tcp拥塞算法"}},[e._v("#")]),e._v(" 内核逻辑自定义（定制TCP拥塞算法）")]),e._v(" "),_("p",[e._v("参考：https://lwn.net/Articles/811631/")]),e._v(" "),_("p",[e._v("从表现上看，就是BPF可以“任意”重定义内核中struct xxx_ops结构体，5.6版本目前已经支持TCP拥塞算法的定制。")]),e._v(" "),_("p",[e._v("如果使用？")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("C or rust 语言定义TCP拥塞算法，参考bpf_cubic.c")])]),e._v(" "),_("li",[_("p",[e._v("clang编译拥塞算法成elf文件")])]),e._v(" "),_("li",[_("p",[e._v("bpftool加载elf文件（参考代码struct_ops.c）")]),e._v(" "),_("p",[e._v("~ bpftool struct_ops register <elf>")])])]),e._v(" "),_("p",[e._v("价值：TCP拥塞算法在CDN这类场景存在大量定制诉求。衍生下，比如file ops，也可以由BPF自定义访问策略。")]),e._v(" "),_("p",[e._v("“Linux内核正在迈向 BPF runtime 微内核方向发展” -- Toke Høiland-Jørgensen")]),e._v(" "),_("h3",{attrs:{id:"安全场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安全场景"}},[e._v("#")]),e._v(" 安全场景")]),e._v(" "),_("p",[e._v("背景：Linux系统的运行安全始终是在动态平衡中，系统安全性通常要评估两方面的契合度：signals（系统中一些异常活动迹象）、mitigation（针对signals的一些补救措施）。内核中的signal/mitigation设置散布在多个地方，配置时费时费力。\n解决方案：引入eBPF，提供一些eBPF Helper实现“unified policy API”，由API来统一配置signal和mitigation。")]),e._v(" "),_("img",{attrs:{src:v(954)}}),e._v(" "),_("h2",{attrs:{id:"ebpf趋势及其背后动机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ebpf趋势及其背后动机"}},[e._v("#")]),e._v(" eBPF趋势及其背后动机")]),e._v(" "),_("h3",{attrs:{id:"应用场景归纳"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用场景归纳"}},[e._v("#")]),e._v(" 应用场景归纳")]),e._v(" "),_("ul",[_("li",[e._v("Bypass内核：比如网络数据路径的bypass、系统调用bypass。")]),e._v(" "),_("li",[e._v("内核逻辑定制：比如安全逻辑的定制、容器安全控制、网络TC定制等")]),e._v(" "),_("li",[e._v("内核状态窥探：比如结合特定业务领域运维功能（包括容器、AI、大数据等）")]),e._v(" "),_("li",[e._v("改造内核基础设施：比如改造内核协议栈iptables、lvs等")]),e._v(" "),_("li",[e._v("性能监控：分布式系统的性能分析等。")]),e._v(" "),_("li",[e._v("…")])]),e._v(" "),_("h3",{attrs:{id:"发展趋势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#发展趋势"}},[e._v("#")]),e._v(" 发展趋势")]),e._v(" "),_("ul",[_("li",[e._v("[ ] eBPF技术朝着几个方向发展：\neBPF虚机的能力逐渐增强：支持有限循环、支持批量报文处理、支持批量MAP操作能力、支持更多指令数量、支持更大的stack、支持更多种类指令。\n开发界面逐渐友好：支持runtime debuging、支持Compile-Once Run-Everywhere、支持更多高级语言lib库。\n内核向eBPF开放的窗口逐渐放大：最早支持单向互动kernel->eBPF；后来支持双向互动kernel<->eBPF；最新可以支持重定义内核逻辑。")]),e._v(" "),_("li",[e._v("[ ] eBPF的应用场景趋势：\n网络方面：广泛应用在TC、协议栈加速、安全、硬件offload、虚拟化/容器网络。\n系统运维：可生产环境部署的运维系统、可视化运维系统。\n其他：文件系统、安全等领域。")]),e._v(" "),_("li",[e._v("[ ] 行业正在发生的：\nIntel提出高性能XDP概念，通过网卡预处理携带meta-data，提升XDP性能。\nGoogle提出弹性TrafficShaping概念，使用eBPF技术重新打造高性能网络QoS，旨在解决TC root lock、逐包QoS等固有问题。\nCloudFlare提出可编程socket的概念，通过eBPF技术旨在解决百万级链接场景socket操作性能耗时大的问题。\nRedhat提出bpfilter项目，通过eBPF技术旨在重新实现iptables，使用户无感知的替换iptables。\nVMWare提出ovs-ebpf项目，通过eBPF技术加速OVS。")])]),e._v(" "),_("h3",{attrs:{id:"发展背后动机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#发展背后动机"}},[e._v("#")]),e._v(" 发展背后动机")]),e._v(" "),_("ul",[_("li",[e._v("原因1：内核的设计做了太多的抽象（解决用户态API稳定、硬件差异兼容的问题），而抽象的代价是性能开销大。在硬件性能大幅提升后，这个问题就凸显出来。")]),e._v(" "),_("li",[e._v("原因2：内核经过长期发展，代码规模已经超过3千万，代码复杂度高，带来的问题是不易扩展新功能。")]),e._v(" "),_("li",[e._v("原因3：内核属于社区开源代码，其发展路径并不受商业公司约束。带来的问题是商业公司在内核上的投入被社区绑定。（google曾经评估重新打造一个内核的代价，旨在代替linux内核）")]),e._v(" "),_("li",[e._v("eBPF特点：内核逻辑可定制、用户态开发代码、内核状态可窥探正是上述原因的发展结果。\n社区活跃厂商：\nFacebook\nCilium\nNetronome\nRedhat\nGoogle\n…")])]),e._v(" "),_("img",{attrs:{src:v(955)}}),e._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),_("p",[e._v("我们就用2句话总结吧~")]),e._v(" "),_("p",[e._v('"BPF is eating the world.”-- Marek Majkowski\nLet’s change the world!  -- openEuler and all Geeks')]),e._v(" "),_("h2",{attrs:{id:"openeuler-ebpf落地情况"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#openeuler-ebpf落地情况"}},[e._v("#")]),e._v(" openEuler eBPF落地情况")]),e._v(" "),_("p",[e._v("openEuler LTS版本 kernel 4.19 ，openEuler 创新版本 kernel 5.4。")]),e._v(" "),_("p",[e._v("除了上游社区eBPF特性/Bugfix回合openEuler社区之外，openEuler致力于基于eBPF技术打造开放式高性能数据数据面底座，为下游厂商提供更便捷的业务创新方式。")]),e._v(" "),_("p",[e._v("具体情况请移步openEuler "),_("a",{attrs:{href:"https://gitee.com/openeuler/community/tree/master/sig/sig-high-performance-network",target:"_blank",rel:"noopener noreferrer"}},[e._v("高性能网络sig"),_("OutboundLink")],1),e._v("交流。")])])}),[],!1,null,null,null);t.default=r.exports},946:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-01.054639a6.png"},947:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-02.aa9e71ef.png"},948:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-03.6d99f7ec.png"},949:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-04.309aeba5.png"},950:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-05.b83c309d.png"},951:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-06.f1fcb113.png"},952:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-07.eba0d418.png"},953:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-08.aa396172.png"},954:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-09.59721b31.png"},955:function(e,t,v){e.exports=v.p+"assets/img/2021-01-04-openEuler eBPF introduce-10.af26855d.png"}}]);