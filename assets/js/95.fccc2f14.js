(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{1030:function(_,t,v){_.exports=v.p+"assets/img/2020-11-30-perf工作模式-01.d7ad57f2.jpg"},1031:function(_,t,v){_.exports=v.p+"assets/img/2020-11-30-perf事件监控结果-02.bb34559d.jpg"},1032:function(_,t,v){_.exports=v.p+"assets/img/2020-11-30-火焰图实例-03.59e96997.jpg"},1682:function(_,t,v){"use strict";v.r(t);var e=v(42),r=Object(e.a)({},(function(){var _=this,t=_.$createElement,e=_._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h2",{attrs:{id:"虚拟机性能调优工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机性能调优工具"}},[_._v("#")]),_._v(" 虚拟机性能调优工具")]),_._v(" "),e("h1",{attrs:{id:"_1-trace工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-trace工具"}},[_._v("#")]),_._v(" 1 trace工具")]),_._v(" "),e("h2",{attrs:{id:"_1-1-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-简介"}},[_._v("#")]),_._v(" 1.1 简介")]),_._v(" "),e("p",[_._v("顾名思义，trace即为追踪的意思，源码位于\\kernel\\trace\\trace.c。该工具主要用来跟踪和记录系统内核相关信息，包括内核信息，内核拓展信息，用户程序等等，尤其是对系统调用，内核服务和中断处理有着详细记录。")]),_._v(" "),e("p",[_._v("该命令有三种工作模式：默认模式、单一模式和循环模式：")]),_._v(" "),e("ol",[e("li",[_._v("默认模式：该模式默认将trace的数据写入磁盘。")]),_._v(" "),e("li",[_._v("单一模式：该模式先将数据写入内存的缓冲区，待trace终止后写回磁盘；当缓冲区满了trace会自动停止。")]),_._v(" "),e("li",[_._v("循环模式：该模式也会将数据先写入内存，不同点是缓冲区满了之后会被循环利用覆盖之前的区域，直到输入“trcstop”命令才会停止trace，写到磁盘。")])]),_._v(" "),e("h2",{attrs:{id:"_1-2-获取trace数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-获取trace数据"}},[_._v("#")]),_._v(" 1.2 获取Trace数据")]),_._v(" "),e("p",[_._v("最常用的收集trace的命令作为例子：trace -a -l -T2000000 -L4000000 -o trace.out （2000000 和 4000000 只是一个例子）")]),_._v(" "),e("p",[_._v("-a : 表示trace进程在后台运行（异步运行）\n-l ：表示trace工作在循环模式\n-o ：指定trace输出文件的目录和文件名，默认的输出文件名为 /var/adm/ras/trcfile\n-T ：表示缓冲区的大小，单位为byte，默认值为128KB。\n-L ：表示写到磁盘上的trace输出文件的大小，单位为byte，默认值为1MB。")]),_._v(" "),e("h1",{attrs:{id:"_2-perf工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-perf工具"}},[_._v("#")]),_._v(" 2 perf工具")]),_._v(" "),e("h2",{attrs:{id:"_2-1-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-简介"}},[_._v("#")]),_._v(" 2.1 简介")]),_._v(" "),e("p",[_._v("perf (performance 的缩写)，是 Linux 系统原生提供的性能分析工具，会返回 CPU 正在执行的函数名以及调用栈(stack)。")]),_._v(" "),e("p",[_._v("它基于事件采样原理，以性能事件为基础，支持针对处理器相关性能指标与操作系统相关性能指标的性能剖析，常用于性能瓶颈的查找与热点代码的定位。")]),_._v(" "),e("p",[_._v("CPU周期(cpu-cycles)是默认的性能事件，所谓的CPU周期是指CPU所能识别的最小时间单元，通常为亿分之几秒，是CPU执行最简单的指令时所需要的时间，例如读取寄存器中的内容，也叫做clock tick。")]),_._v(" "),e("p",[_._v("perf的具体原理是这样的：每隔一个固定的时间，就在CPU上（每个核上都有）产生一个中断，在中断上看看，当前是哪个pid，哪个函数，然后给对应的pid和函数加一个统计值，这样，我们就知道CPU有百分几的时间在某个pid，或者某个函数上了。工作模式类似下图：")]),_._v(" "),e("img",{attrs:{src:v(1030)}}),_._v(" "),e("p",[_._v("这是一种采样的模式，我们预期，运行时间越多的函数，被时钟中断击中的机会越大，从而推测，那个函数（或者pid等）的CPU占用率就越高。")]),_._v(" "),e("h2",{attrs:{id:"_2-2-常用子工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-常用子工具"}},[_._v("#")]),_._v(" 2.2 常用子工具")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("perf-list")]),_._v(" "),e("p",[_._v("Perf-list用来查看perf所支持的性能事件，主要分为三类：")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("Hardware Event 是由 PMU 硬件产生的事件，比如 cache 命中，当您需要了解程序对硬件特性的使用情况时，便需要对这些事件进行采样。")])]),_._v(" "),e("li",[e("p",[_._v("Software Event 是内核软件产生的事件，比如进程切换，tick 数等。")])]),_._v(" "),e("li",[e("p",[_._v("Tracepoint event 是内核中的静态 tracepoint 所触发的事件，这些 tracepoint 用来判断程序运行期间内核的行为细节，比如 slab 分配器的分配次数等。")])])]),_._v(" "),e("p",[_._v("hw/cache/pmu都是硬件相关的；tracepoint基于内核的ftrace；sw实际上是内核计数器。")]),_._v(" "),e("blockquote",[e("p",[_._v("使用方法：perf list [hw | sw | cache | tracepoint | event_glob]")])])]),_._v(" "),e("li",[e("p",[_._v("perf-stat")]),_._v(" "),e("p",[_._v("面对一个性能问题的时候，最好采用自顶向下的策略。先整体看看该程序运行时各种统计事件的大概，再针对某些方向深入细节。")]),_._v(" "),e("p",[_._v("整体监测代码性能就需要使用perf stat这个工具，该工具主要是从全局上监控，可以看到程序导致性能瓶颈主要是什么原因。perf stat通过概括精简的方式提供被调试程序运行的整体情况和汇总数据。")]),_._v(" "),e("p",[_._v("在默认情况下，perf stat会统计cycles、instructions、cache-misses、context-switches等对系统或软件性能影响最大的几个硬件和软件事件。通过这些统计情况，基本上就能了解软件的运行效率是受CPU影响较大还是IO影响较大，是受运算指令数影响较大还是内存访问影响较大。通过指令数、缓存访问数等统计还能大致判断软件性能是否符合对应的功能设计，是否有代码级优化的可能。")]),_._v(" "),e("blockquote",[e("p",[_._v("使用方法：")]),_._v(" "),e("p",[_._v("perf stat [-e "),e("EVENT",[_._v(" | --event=EVENT] [-a] "),e("command")],1)],1),_._v(" "),e("p",[_._v("perf stat [-e "),e("EVENT",[_._v(" | --event=EVENT] [-a] - "),e("command",[_._v(" ["),e("options",[_._v("]")])],1)],1)],1)]),_._v(" "),e("p",[_._v("即perf stat + 程序，程序运行完之后，然后使用"),e("strong",[_._v("ctrl+c")]),_._v("来终止程序（若程序自动终止则不用），之后，perf便会打印出监控事件结果，类似如下所示：")]),_._v(" "),e("img",{attrs:{src:v(1031)}}),_._v(" "),e("ol",[e("li",[e("p",[_._v("102.97 task-clock是指程序运行期间占用了xx的任务时钟周期，该值高，说明程序的多数时间花费在CPU计算上而非IO操作。")])]),_._v(" "),e("li",[e("p",[_._v("6 context-switches是指程序运行期间发生了xx次上下文切换，记录了程序运行过程中发生了多少次进程切换，频繁的进程切换是应该避免的。（有进程进程间频繁切换，或者内核态与用户态频繁切换）")])]),_._v(" "),e("li",[e("p",[_._v("0 cpu-migrations 是指程序运行期间发生了xx次CPU迁移，即用户程序原本在一个CPU上运行，后来迁移到另一个CPU")])]),_._v(" "),e("li",[e("p",[_._v("617 page-faults 是指程序发生了xx次页错误")])]),_._v(" "),e("li",[e("p",[_._v("其他可以监控的譬如分支预测、cache命中等")])])])]),_._v(" "),e("li",[e("p",[_._v("perf-top")]),_._v(" "),e("p",[_._v("perf top可以用于观察系统和软件内性能开销最大的函数列表。通过观察不同事件的函数列表可以分析出不同函数的性能开销情况和特点，判断其优化方向。")]),_._v(" "),e("p",[_._v("例如如果某个函数在perf top -e instructions中排名靠后，却在perf top -e cache-misses和perf top -e cycles中排名靠前，说明函数中存在大量cache-miss造成CPU资源占用较多，就可以考虑优化该函数中的内存访问次数和策略，来减少内存访问和cache-miss次数，从而降低CPU开销。")]),_._v(" "),e("blockquote",[e("p",[_._v("使用方法：perf top [-e "),e("EVENT",[_._v(" | --event=EVENT] ["),e("options",[_._v("]")])],1)],1),_._v(" "),e("blockquote",[e("p",[_._v("常用参数：")]),_._v(" "),e("p",[_._v("-e "),e("event",[_._v("：指明要分析的性能事件。")])],1),_._v(" "),e("p",[_._v("-p "),e("pid",[_._v("：Profile events on existing Process ID (comma sperated list). 仅分析目标进程及其创建的线程。")])],1),_._v(" "),e("p",[_._v("-k "),e("path",[_._v("：Path to vmlinux. Required for annotation functionality. 带符号表的内核映像所在的路径。")])]),_._v(" "),e("p",[_._v("-K：不显示属于内核或模块的符号。")]),_._v(" "),e("p",[_._v("-U：不显示属于用户态程序的符号。")]),_._v(" "),e("p",[_._v("-d "),e("n",[_._v("：界面的刷新周期，默认为2s，因为perf top默认每2s从mmap的内存区域读取一次性能数据。")])],1),_._v(" "),e("p",[_._v("-g：得到函数的调用关系图。")])])])]),_._v(" "),e("li",[e("p",[_._v("perf-record/perf-report")]),_._v(" "),e("p",[_._v("收集采样信息，并将其记录在数据文件中。随后可以通过其它工具(perf-report)对数据文件进行分析，结果类似于perf-top。")]),_._v(" "),e("blockquote",[e("p",[_._v("使用方法：首先perf record记录并生成data文件，然后通过perf report显示。")])])])]),_._v(" "),e("h1",{attrs:{id:"_3-火焰图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-火焰图"}},[_._v("#")]),_._v(" 3 火焰图")]),_._v(" "),e("h2",{attrs:{id:"_3-1-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-简介"}},[_._v("#")]),_._v(" 3.1 简介")]),_._v(" "),e("p",[_._v("整个图形看起来就像一团跳动的火焰，这也正是其名字的由来。燃烧在火苗尖部的就是 CPU 正在执行的操作，不过需要说明的是颜色是随机的，本身并没有特殊的含义，纵向表示调用栈的深度，横向表示消耗的时间。因为调用栈在横向会按照字母排序，并且同样的调用栈会做合并，所以一个格子的宽度越大越说明其可能是瓶颈。综上所述，主要就是看那些比较宽大的火苗，特别留意那些类似平顶山的火苗。")]),_._v(" "),e("p",[_._v("CPU火焰图中的每一个方框是一个函数，方框的长度，代表了它的执行时间，所以越宽的函数，执行越久。火焰图的楼层每高一层，就是更深一级的函数被调用，最顶层的函数，是叶子函数。")]),_._v(" "),e("h2",{attrs:{id:"_3-2-使用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-使用方法"}},[_._v("#")]),_._v(" 3.2 使用方法")]),_._v(" "),e("p",[_._v("1、Flame Graph项目位于GitHub上：https://github.com/brendangregg/FlameGraph")]),_._v(" "),e("p",[_._v("2、可以用git将其clone下来：git clone https://github.com/brendangregg/FlameGraph.git")]),_._v(" "),e("p",[_._v("我们以perf为例，看一下flamegraph的使用方法：")]),_._v(" "),e("p",[_._v("1、第一步")]),_._v(" "),e("blockquote",[e("p",[_._v("perf record -e cpu-clock -g -p "),e("code",[_._v("pidof xxx")])])]),_._v(" "),e("p",[_._v("Ctrl+C结束执行后，在当前目录下会生成采样数据perf.data.")]),_._v(" "),e("p",[_._v("2、第二步")]),_._v(" "),e("p",[_._v("用perf script工具对perf.data进行解析")]),_._v(" "),e("blockquote",[e("p",[_._v("perf script -i perf.data &> perf.unfold")])]),_._v(" "),e("p",[_._v("3、第三步（进入FlameGraph目录）")]),_._v(" "),e("p",[_._v("将perf.unfold中的符号进行折叠：")]),_._v(" "),e("blockquote",[e("p",[_._v("./stackcollapse-perf.pl perf.unfold &> perf.folded")])]),_._v(" "),e("p",[_._v("4、最后生成svg图：")]),_._v(" "),e("blockquote",[e("p",[_._v("./flamegraph.pl perf.folded > perf.svg")])]),_._v(" "),e("img",{attrs:{src:v(1032)}}),_._v(" "),e("h2",{attrs:{id:"_3-3-解析火焰图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-解析火焰图"}},[_._v("#")]),_._v(" 3.3 解析火焰图")]),_._v(" "),e("p",[_._v("火焰图是基于 stack 信息生成的 SVG 图片，用来展示 CPU 的调用栈。")]),_._v(" "),e("p",[_._v("y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数.")]),_._v(" "),e("p",[_._v("x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的.")]),_._v(" "),e("p",[_._v("火焰图就是看顶层的哪个函数占据的宽度最大。只要有 “平顶”(plateaus)，就表示该函数可能存在性能问题。即火焰图就是看函数占据的宽度，宽度越大越可能存在性能问题。")]),_._v(" "),e("h1",{attrs:{id:"_4-linux常用的性能检测工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-linux常用的性能检测工具"}},[_._v("#")]),_._v(" 4 Linux常用的性能检测工具")]),_._v(" "),e("table",[e("thead",[e("tr",[e("th",[_._v("工具")]),_._v(" "),e("th",[_._v("功能描述")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("uptime")]),_._v(" "),e("td",[_._v("系统平均负载率")])]),_._v(" "),e("tr",[e("td",[_._v("dmesg")]),_._v(" "),e("td",[_._v("硬件/系统信息")])]),_._v(" "),e("tr",[e("td",[_._v("top")]),_._v(" "),e("td",[_._v("进程进行状态")])]),_._v(" "),e("tr",[e("td",[_._v("iostat")]),_._v(" "),e("td",[_._v("CPU和磁盘平均使用率")])]),_._v(" "),e("tr",[e("td",[_._v("vmstat")]),_._v(" "),e("td",[_._v("系统运行状态")])]),_._v(" "),e("tr",[e("td",[_._v("sar")]),_._v(" "),e("td",[_._v("实时收集系统使用状态")])]),_._v(" "),e("tr",[e("td",[_._v("free")]),_._v(" "),e("td",[_._v("内存使用率")])]),_._v(" "),e("tr",[e("td",[_._v("traffic-vis")]),_._v(" "),e("td",[_._v("网络监控（只有SUSE有）")])]),_._v(" "),e("tr",[e("td",[_._v("pmap")]),_._v(" "),e("td",[_._v("进程内存占用率")])]),_._v(" "),e("tr",[e("td",[_._v("strace")]),_._v(" "),e("td",[_._v("追踪程序运行状态")])]),_._v(" "),e("tr",[e("td",[_._v("ulimit")]),_._v(" "),e("td",[_._v("系统资源使用限制")])]),_._v(" "),e("tr",[e("td",[_._v("mpstat")]),_._v(" "),e("td",[_._v("多处理器使用率")])])])]),_._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"top"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#top"}},[_._v("#")]),_._v(" top")]),_._v(" "),e("p",[e("strong",[_._v("命令功能：")])]),_._v(" "),e("p",[_._v("显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等")]),_._v(" "),e("p",[e("strong",[_._v("命令参数：")])]),_._v(" "),e("p",[_._v("-b 批处理")]),_._v(" "),e("p",[_._v("-c 显示完整的治命令")]),_._v(" "),e("p",[_._v("-I 忽略失效过程")]),_._v(" "),e("p",[_._v("-s 保密模式")]),_._v(" "),e("p",[_._v("-S 累积模式")]),_._v(" "),e("p",[_._v("-i<时间> 设置间隔时间")]),_._v(" "),e("p",[_._v("-u<用户名> 指定用户名")]),_._v(" "),e("p",[_._v("-p<进程号> 指定进程")]),_._v(" "),e("p",[_._v("-n<次数> 循环显示的次数")])]),_._v(" "),e("li",[e("h3",{attrs:{id:"free"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#free"}},[_._v("#")]),_._v(" free")]),_._v(" "),e("p",[e("strong",[_._v("命令功能：")])]),_._v(" "),e("p",[_._v("显示系统已用及空余物理内存量、交换分区使用情况（swap memory）、内核占用的缓存、及共享内存。")]),_._v(" "),e("p",[e("strong",[_._v("命令参数：")])]),_._v(" "),e("p",[_._v("-b, –bytes， 以Byte为单位显示内存使用情况")]),_._v(" "),e("p",[_._v("-k, –kilo， 以KB为单位， 这也是默认值")]),_._v(" "),e("p",[_._v("-m, –mega， 以MB为单位显示内容使用情况")]),_._v(" "),e("p",[_._v("-g, –giga， 以GB为单位显示内存使用情况")]),_._v(" "),e("p",[_._v("-h, –human， 自动将数值转换为人类易读形式")]),_._v(" "),e("p",[_._v("-c, –count， 展示结果count次，需与-s配合使用")]),_._v(" "),e("p",[_._v("-s, –seconds， 动态刷新内存使用情况的间隔")])])]),_._v(" "),e("ul",[e("li",[e("h3",{attrs:{id:"iostat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iostat"}},[_._v("#")]),_._v(" iostat")]),_._v(" "),e("p",[e("strong",[_._v("命令功能：")])]),_._v(" "),e("p",[_._v("查看CPU、网卡、tty设备、磁盘、CD-ROM 等等设备的活动情况,负载信息。")]),_._v(" "),e("p",[e("strong",[_._v("命令参数：")])]),_._v(" "),e("p",[_._v("-C 显示CPU使用情况")]),_._v(" "),e("p",[_._v("-d 显示磁盘使用情况")]),_._v(" "),e("p",[_._v("-m 以 M 为单位显示")]),_._v(" "),e("p",[_._v("-k 以 KB 为单位显示")]),_._v(" "),e("p",[_._v("-N 显示磁盘阵列(LVM) 信息")]),_._v(" "),e("p",[_._v("-n 显示NFS 使用情况")]),_._v(" "),e("p",[_._v("-p[磁盘] 显示磁盘和分区的情况")]),_._v(" "),e("p",[_._v("-t 显示终端和CPU的信息")]),_._v(" "),e("p",[_._v("-x 显示详细信息")]),_._v(" "),e("p",[_._v("-V 显示版本信息")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);